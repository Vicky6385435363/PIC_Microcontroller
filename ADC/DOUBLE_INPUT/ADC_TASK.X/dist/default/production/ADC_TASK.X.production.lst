

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Fri Aug 30 16:26:07 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    23                           	dabs	1,0x7E,2
    24     0000                     
    25                           ; Generated 12/10/2023 GMT
    26                           ; 
    27                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution. Publication is not required when
    41                           ;        this file is used in an embedded application.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F877A Definitions
    57                           ; 
    58                           ; SFR Addresses
    59     0000                     	;# 
    60     0001                     	;# 
    61     0002                     	;# 
    62     0003                     	;# 
    63     0004                     	;# 
    64     0005                     	;# 
    65     0006                     	;# 
    66     0007                     	;# 
    67     0008                     	;# 
    68     0009                     	;# 
    69     000A                     	;# 
    70     000B                     	;# 
    71     000C                     	;# 
    72     000D                     	;# 
    73     000E                     	;# 
    74     000E                     	;# 
    75     000F                     	;# 
    76     0010                     	;# 
    77     0011                     	;# 
    78     0012                     	;# 
    79     0013                     	;# 
    80     0014                     	;# 
    81     0015                     	;# 
    82     0015                     	;# 
    83     0016                     	;# 
    84     0017                     	;# 
    85     0018                     	;# 
    86     0019                     	;# 
    87     001A                     	;# 
    88     001B                     	;# 
    89     001B                     	;# 
    90     001C                     	;# 
    91     001D                     	;# 
    92     001E                     	;# 
    93     001F                     	;# 
    94     0081                     	;# 
    95     0085                     	;# 
    96     0086                     	;# 
    97     0087                     	;# 
    98     0088                     	;# 
    99     0089                     	;# 
   100     008C                     	;# 
   101     008D                     	;# 
   102     008E                     	;# 
   103     0091                     	;# 
   104     0092                     	;# 
   105     0093                     	;# 
   106     0094                     	;# 
   107     0098                     	;# 
   108     0099                     	;# 
   109     009C                     	;# 
   110     009D                     	;# 
   111     009E                     	;# 
   112     009F                     	;# 
   113     010C                     	;# 
   114     010D                     	;# 
   115     010E                     	;# 
   116     010F                     	;# 
   117     018C                     	;# 
   118     018D                     	;# 
   119     0000                     	;# 
   120     0001                     	;# 
   121     0002                     	;# 
   122     0003                     	;# 
   123     0004                     	;# 
   124     0005                     	;# 
   125     0006                     	;# 
   126     0007                     	;# 
   127     0008                     	;# 
   128     0009                     	;# 
   129     000A                     	;# 
   130     000B                     	;# 
   131     000C                     	;# 
   132     000D                     	;# 
   133     000E                     	;# 
   134     000E                     	;# 
   135     000F                     	;# 
   136     0010                     	;# 
   137     0011                     	;# 
   138     0012                     	;# 
   139     0013                     	;# 
   140     0014                     	;# 
   141     0015                     	;# 
   142     0015                     	;# 
   143     0016                     	;# 
   144     0017                     	;# 
   145     0018                     	;# 
   146     0019                     	;# 
   147     001A                     	;# 
   148     001B                     	;# 
   149     001B                     	;# 
   150     001C                     	;# 
   151     001D                     	;# 
   152     001E                     	;# 
   153     001F                     	;# 
   154     0081                     	;# 
   155     0085                     	;# 
   156     0086                     	;# 
   157     0087                     	;# 
   158     0088                     	;# 
   159     0089                     	;# 
   160     008C                     	;# 
   161     008D                     	;# 
   162     008E                     	;# 
   163     0091                     	;# 
   164     0092                     	;# 
   165     0093                     	;# 
   166     0094                     	;# 
   167     0098                     	;# 
   168     0099                     	;# 
   169     009C                     	;# 
   170     009D                     	;# 
   171     009E                     	;# 
   172     009F                     	;# 
   173     010C                     	;# 
   174     010D                     	;# 
   175     010E                     	;# 
   176     010F                     	;# 
   177     018C                     	;# 
   178     018D                     	;# 
   179                           
   180                           	psect	idataBANK0
   181     0404                     __pidataBANK0:
   182                           
   183                           ;initializer for _msg_2
   184     0404  3441               	retlw	65
   185     0405  3444               	retlw	68
   186     0406  3443               	retlw	67
   187     0407  3420               	retlw	32
   188     0408  3443               	retlw	67
   189     0409  3441               	retlw	65
   190     040A  344C               	retlw	76
   191     040B  343A               	retlw	58
   192     040C  3420               	retlw	32
   193                           
   194                           ;initializer for _msg_1
   195     040D  3441               	retlw	65
   196     040E  3444               	retlw	68
   197     040F  3443               	retlw	67
   198     0410  3420               	retlw	32
   199     0411  3452               	retlw	82
   200     0412  3441               	retlw	65
   201     0413  3457               	retlw	87
   202     0414  343A               	retlw	58
   203     0415  3420               	retlw	32
   204     0008                     _PORTD	set	8
   205     0007                     _PORTC	set	7
   206     001E                     _ADRESH	set	30
   207     001F                     _ADCON0	set	31
   208     009F                     _ADCON1	set	159
   209     0088                     _TRISD	set	136
   210     0087                     _TRISC	set	135
   211     0085                     _TRISA	set	133
   212     009E                     _ADRESL	set	158
   213                           
   214                           	psect	cinit
   215     07E6                     start_initialization:	
   216                           ; #config settings
   217                           
   218     07E6                     __initialization:
   219                           
   220                           ; Initialize objects allocated to BANK0
   221     07E6  1383               	bcf	3,7	;select IRP bank0
   222     07E7  305E               	movlw	low (__pdataBANK0+18)
   223     07E8  00FD               	movwf	btemp+-1
   224     07E9  3004               	movlw	high __pidataBANK0
   225     07EA  00FE               	movwf	btemp
   226     07EB  3004               	movlw	low __pidataBANK0
   227     07EC  00FF               	movwf	btemp+1
   228     07ED  304C               	movlw	low __pdataBANK0
   229     07EE  0084               	movwf	4
   230     07EF  120A  118A  241A  120A  118A  	fcall	init_ram0
   231                           
   232                           ; Clear objects allocated to BANK0
   233     07F4  3020               	movlw	low __pbssBANK0
   234     07F5  0084               	movwf	4
   235     07F6  3036               	movlw	low (__pbssBANK0+22)
   236     07F7  120A  118A  23FC  120A  118A  	fcall	clear_ram0
   237     07FC                     end_of_initialization:	
   238                           ;End of C runtime variable initialization code
   239                           
   240     07FC                     __end_of__initialization:
   241     07FC  0183               	clrf	3
   242     07FD  120A  118A  2DC7   	ljmp	_main	;jump to C main() function
   243                           
   244                           	psect	bssBANK0
   245     0020                     __pbssBANK0:
   246     0020                     _volt:
   247     0020                     	ds	4
   248     0024                     _result:
   249     0024                     	ds	4
   250     0028                     _d2:
   251     0028                     	ds	2
   252     002A                     _d1:
   253     002A                     	ds	2
   254     002C                     _d4:
   255     002C                     	ds	2
   256     002E                     _d3:
   257     002E                     	ds	2
   258     0030                     _adc_high:
   259     0030                     	ds	2
   260     0032                     _adc_low:
   261     0032                     	ds	2
   262     0034                     _m:
   263     0034                     	ds	2
   264                           
   265                           	psect	dataBANK0
   266     004C                     __pdataBANK0:
   267     004C                     _msg_2:
   268     004C                     	ds	9
   269     0055                     _msg_1:
   270     0055                     	ds	9
   271                           
   272                           	psect	inittext
   273     0416                     init_fetch0:	
   274                           ;	Called with low address in FSR and high address in W
   275                           
   276     0416  087E               	movf	btemp,w
   277     0417  008A               	movwf	10
   278     0418  087F               	movf	btemp+1,w
   279     0419  0082               	movwf	2
   280     041A                     init_ram0:	
   281                           ;Called with:
   282                           ;	high address of idata address in btemp 
   283                           ;	low address of idata address in btemp+1 
   284                           ;	low address of data in FSR
   285                           ;	high address + 1 of data in btemp-1
   286                           
   287     041A  120A  118A  2416  120A  118A  	fcall	init_fetch0
   288     041F  0080               	movwf	0
   289     0420  0A84               	incf	4,f
   290     0421  0804               	movf	4,w
   291     0422  067D               	xorwf	btemp+-1,w
   292     0423  1903               	btfsc	3,2
   293     0424  3400               	retlw	0
   294     0425  0AFF               	incf	btemp+1,f
   295     0426  1903               	btfsc	3,2
   296     0427  0AFE               	incf	btemp,f
   297     0428  2C1A               	goto	init_ram0
   298                           
   299                           	psect	clrtext
   300     03FC                     clear_ram0:	
   301                           ;	Called with FSR containing the base address, and
   302                           ;	W with the last address+1
   303                           
   304     03FC  0064               	clrwdt	;clear the watchdog before getting into this loop
   305     03FD                     clrloop0:
   306     03FD  0180               	clrf	0	;clear RAM location pointed to by FSR
   307     03FE  0A84               	incf	4,f	;increment pointer
   308     03FF  0604               	xorwf	4,w	;XOR with final address
   309     0400  1903               	btfsc	3,2	;have we reached the end yet?
   310     0401  3400               	retlw	0	;all done for this memory range, return
   311     0402  0604               	xorwf	4,w	;XOR again to restore value
   312     0403  2BFD               	goto	clrloop0	;do the next byte
   313                           
   314                           	psect	cstackCOMMON
   315     0070                     __pcstackCOMMON:
   316     0070                     ?_lcd_init:
   317     0070                     ?_lcd_command:	
   318                           ; 1 bytes @ 0x0
   319                           
   320     0070                     ??_lcd_command:	
   321                           ; 1 bytes @ 0x0
   322                           
   323     0070                     ?_lcd_data:	
   324                           ; 1 bytes @ 0x0
   325                           
   326     0070                     ??_lcd_data:	
   327                           ; 1 bytes @ 0x0
   328                           
   329     0070                     ?_main:	
   330                           ; 1 bytes @ 0x0
   331                           
   332     0070                     ?___bmul:	
   333                           ; 1 bytes @ 0x0
   334                           
   335     0070                     ?___wmul:	
   336                           ; 1 bytes @ 0x0
   337                           
   338     0070                     ?___lmul:	
   339                           ; 2 bytes @ 0x0
   340                           
   341     0070                     ___bmul@multiplicand:	
   342                           ; 4 bytes @ 0x0
   343                           
   344     0070                     ___wmul@multiplier:	
   345                           ; 1 bytes @ 0x0
   346                           
   347     0070                     ___lmul@multiplier:	
   348                           ; 2 bytes @ 0x0
   349                           
   350                           
   351                           ; 4 bytes @ 0x0
   352     0070                     	ds	1
   353     0071                     ??___bmul:
   354     0071                     ___bmul@product:	
   355                           ; 1 bytes @ 0x1
   356                           
   357                           
   358                           ; 1 bytes @ 0x1
   359     0071                     	ds	1
   360     0072                     lcd_command@i:
   361     0072                     lcd_data@i:	
   362                           ; 1 bytes @ 0x2
   363                           
   364     0072                     ___bmul@multiplier:	
   365                           ; 1 bytes @ 0x2
   366                           
   367     0072                     ___wmul@multiplicand:	
   368                           ; 1 bytes @ 0x2
   369                           
   370                           
   371                           ; 2 bytes @ 0x2
   372     0072                     	ds	1
   373     0073                     ??_lcd_init:
   374                           
   375                           ; 1 bytes @ 0x3
   376     0073                     	ds	1
   377     0074                     ??___wmul:
   378     0074                     ___wmul@product:	
   379                           ; 1 bytes @ 0x4
   380                           
   381     0074                     ___lmul@multiplicand:	
   382                           ; 2 bytes @ 0x4
   383                           
   384                           
   385                           ; 4 bytes @ 0x4
   386     0074                     	ds	2
   387     0076                     ?___lwdiv:
   388     0076                     ___lwdiv@divisor:	
   389                           ; 2 bytes @ 0x6
   390                           
   391                           
   392                           ; 2 bytes @ 0x6
   393     0076                     	ds	2
   394     0078                     ??___lmul:
   395     0078                     ___lwdiv@dividend:	
   396                           ; 1 bytes @ 0x8
   397                           
   398                           
   399                           ; 2 bytes @ 0x8
   400     0078                     	ds	1
   401     0079                     ___lmul@product:
   402                           
   403                           ; 4 bytes @ 0x9
   404     0079                     	ds	1
   405     007A                     ??___lwdiv:
   406     007A                     ___lwdiv@quotient:	
   407                           ; 1 bytes @ 0xA
   408                           
   409                           
   410                           ; 2 bytes @ 0xA
   411     007A                     	ds	2
   412     007C                     ___lwdiv@counter:
   413                           
   414                           ; 1 bytes @ 0xC
   415     007C                     	ds	1
   416     007D                     ??___lldiv:
   417                           
   418                           ; 1 bytes @ 0xD
   419     007D                     	ds	1
   420                           
   421                           	psect	cstackBANK0
   422     0036                     __pcstackBANK0:
   423     0036                     ?_lcd_output:
   424     0036                     ?___lldiv:	
   425                           ; 1 bytes @ 0x0
   426                           
   427     0036                     lcd_output@i:	
   428                           ; 4 bytes @ 0x0
   429                           
   430     0036                     ___lldiv@divisor:	
   431                           ; 2 bytes @ 0x0
   432                           
   433                           
   434                           ; 4 bytes @ 0x0
   435     0036                     	ds	2
   436     0038                     ??_lcd_output:
   437                           
   438                           ; 1 bytes @ 0x2
   439     0038                     	ds	2
   440     003A                     ___lldiv@dividend:
   441                           
   442                           ; 4 bytes @ 0x4
   443     003A                     	ds	4
   444     003E                     lcd_output@m:
   445     003E                     ___lldiv@quotient:	
   446                           ; 2 bytes @ 0x8
   447                           
   448                           
   449                           ; 4 bytes @ 0x8
   450     003E                     	ds	4
   451     0042                     ___lldiv@counter:
   452                           
   453                           ; 1 bytes @ 0xC
   454     0042                     	ds	1
   455     0043                     ??_main:
   456                           
   457                           ; 1 bytes @ 0xD
   458     0043                     	ds	8
   459     004B                     main@i:
   460                           
   461                           ; 1 bytes @ 0x15
   462     004B                     	ds	1
   463                           
   464                           	psect	maintext
   465     05C7                     __pmaintext:	
   466 ;;
   467 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   468 ;;
   469 ;; *************** function _main *****************
   470 ;; Defined at:
   471 ;;		line 26 in file "ADC_TASK.c"
   472 ;; Parameters:    Size  Location     Type
   473 ;;		None
   474 ;; Auto vars:     Size  Location     Type
   475 ;;  i               1   21[BANK0 ] unsigned char 
   476 ;; Return value:  Size  Location     Type
   477 ;;                  1    wreg      void 
   478 ;; Registers used:
   479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   480 ;; Tracked objects:
   481 ;;		On entry : B00/0
   482 ;;		On exit  : 0/0
   483 ;;		Unchanged: 0/0
   484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   485 ;;      Params:         0       0       0       0       0
   486 ;;      Locals:         0       1       0       0       0
   487 ;;      Temps:          0       8       0       0       0
   488 ;;      Totals:         0       9       0       0       0
   489 ;;Total ram usage:        9 bytes
   490 ;; Hardware stack levels required when called: 2
   491 ;; This function calls:
   492 ;;		___lldiv
   493 ;;		___lmul
   494 ;;		_lcd_command
   495 ;;		_lcd_data
   496 ;;		_lcd_init
   497 ;;		_lcd_output
   498 ;; This function is called by:
   499 ;;		Startup code after reset
   500 ;; This function uses a non-reentrant model
   501 ;;
   502                           
   503     05C7                     _main:	
   504                           ;psect for function _main
   505                           
   506     05C7                     l1041:	
   507                           ;incstack = 0
   508                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   509                           
   510                           
   511                           ;ADC_TASK.c: 27:     unsigned char i;;ADC_TASK.c: 28:     lcd_init();
   512     05C7  120A  118A  2518  120A  118A  	fcall	_lcd_init
   513                           
   514                           ;ADC_TASK.c: 30:     lcd_command(0x80);
   515     05CC  3080               	movlw	128
   516     05CD  120A  118A  2452  120A  118A  	fcall	_lcd_command
   517     05D2                     l1043:
   518                           
   519                           ;ADC_TASK.c: 31:     for (i = 0; i < 9; i++) {
   520     05D2  1283               	bcf	3,5	;RP0=0, select bank0
   521     05D3  1303               	bcf	3,6	;RP1=0, select bank0
   522     05D4  01CB               	clrf	main@i
   523     05D5                     l1049:
   524                           
   525                           ;ADC_TASK.c: 32:         lcd_data(msg_1[i]);
   526     05D5  084B               	movf	main@i,w
   527     05D6  3E55               	addlw	(low (_msg_1| 0))& (0+255)
   528     05D7  0084               	movwf	4
   529     05D8  1383               	bcf	3,7	;select IRP bank0
   530     05D9  0800               	movf	0,w
   531     05DA  120A  118A  2429  120A  118A  	fcall	_lcd_data
   532     05DF                     l1051:
   533                           
   534                           ;ADC_TASK.c: 33:     }
   535     05DF  3001               	movlw	1
   536     05E0  00FF               	movwf	btemp+1
   537     05E1  087F               	movf	btemp+1,w
   538     05E2  1283               	bcf	3,5	;RP0=0, select bank0
   539     05E3  1303               	bcf	3,6	;RP1=0, select bank0
   540     05E4  07CB               	addwf	main@i,f
   541     05E5                     l1053:
   542     05E5  3009               	movlw	9
   543     05E6  024B               	subwf	main@i,w
   544     05E7  1C03               	skipc
   545     05E8  2DEA               	goto	u751
   546     05E9  2DEB               	goto	u750
   547     05EA                     u751:
   548     05EA  2DD5               	goto	l1049
   549     05EB                     u750:
   550     05EB                     l1055:
   551                           
   552                           ;ADC_TASK.c: 35:     lcd_command(0xC0);
   553     05EB  30C0               	movlw	192
   554     05EC  120A  118A  2452  120A  118A  	fcall	_lcd_command
   555     05F1                     l1057:
   556                           
   557                           ;ADC_TASK.c: 36:     for (i = 0; i < 9; i++) {
   558     05F1  1283               	bcf	3,5	;RP0=0, select bank0
   559     05F2  1303               	bcf	3,6	;RP1=0, select bank0
   560     05F3  01CB               	clrf	main@i
   561     05F4                     l1063:
   562                           
   563                           ;ADC_TASK.c: 37:         lcd_data(msg_2[i]);
   564     05F4  084B               	movf	main@i,w
   565     05F5  3E4C               	addlw	(low (_msg_2| 0))& (0+255)
   566     05F6  0084               	movwf	4
   567     05F7  1383               	bcf	3,7	;select IRP bank0
   568     05F8  0800               	movf	0,w
   569     05F9  120A  118A  2429  120A  118A  	fcall	_lcd_data
   570     05FE                     l1065:
   571                           
   572                           ;ADC_TASK.c: 38:     }
   573     05FE  3001               	movlw	1
   574     05FF  00FF               	movwf	btemp+1
   575     0600  087F               	movf	btemp+1,w
   576     0601  1283               	bcf	3,5	;RP0=0, select bank0
   577     0602  1303               	bcf	3,6	;RP1=0, select bank0
   578     0603  07CB               	addwf	main@i,f
   579     0604                     l1067:
   580     0604  3009               	movlw	9
   581     0605  024B               	subwf	main@i,w
   582     0606  1C03               	skipc
   583     0607  2E09               	goto	u761
   584     0608  2E0A               	goto	u760
   585     0609                     u761:
   586     0609  2DF4               	goto	l1063
   587     060A                     u760:
   588     060A                     l1069:
   589                           
   590                           ;ADC_TASK.c: 40:     lcd_command(0xCD);
   591     060A  30CD               	movlw	205
   592     060B  120A  118A  2452  120A  118A  	fcall	_lcd_command
   593                           
   594                           ;ADC_TASK.c: 41:     lcd_data(0x56);
   595     0610  3056               	movlw	86
   596     0611  120A  118A  2429  120A  118A  	fcall	_lcd_data
   597     0616                     l1071:
   598                           
   599                           ;ADC_TASK.c: 44:         ADCON0 = 0x91;
   600     0616  3091               	movlw	145
   601     0617  1283               	bcf	3,5	;RP0=0, select bank0
   602     0618  1303               	bcf	3,6	;RP1=0, select bank0
   603     0619  009F               	movwf	31	;volatile
   604     061A                     l1073:
   605                           
   606                           ;ADC_TASK.c: 45:         ADCON0 |= 0x04;
   607     061A  151F               	bsf	31,2	;volatile
   608     061B                     l60:	
   609                           ;ADC_TASK.c: 46:         while (ADCON0 & 0x04);
   610                           
   611     061B  191F               	btfsc	31,2	;volatile
   612     061C  2E1E               	goto	u771
   613     061D  2E1F               	goto	u770
   614     061E                     u771:
   615     061E  2E1B               	goto	l60
   616     061F                     u770:
   617     061F                     l1075:
   618                           
   619                           ;ADC_TASK.c: 48:         adc_high = ADRESH;
   620     061F  081E               	movf	30,w	;volatile
   621     0620  00C3               	movwf	??_main
   622     0621  01C4               	clrf	??_main+1
   623     0622  0843               	movf	??_main,w
   624     0623  00B0               	movwf	_adc_high
   625     0624  0844               	movf	??_main+1,w
   626     0625  00B1               	movwf	_adc_high+1
   627                           
   628                           ;ADC_TASK.c: 49:         adc_low = ADRESL;
   629     0626  1683               	bsf	3,5	;RP0=1, select bank1
   630     0627  1303               	bcf	3,6	;RP1=0, select bank1
   631     0628  081E               	movf	30,w	;volatile
   632     0629  1283               	bcf	3,5	;RP0=0, select bank0
   633     062A  1303               	bcf	3,6	;RP1=0, select bank0
   634     062B  00C3               	movwf	??_main
   635     062C  01C4               	clrf	??_main+1
   636     062D  0843               	movf	??_main,w
   637     062E  00B2               	movwf	_adc_low
   638     062F  0844               	movf	??_main+1,w
   639     0630  00B3               	movwf	_adc_low+1
   640     0631                     l1077:
   641                           
   642                           ;ADC_TASK.c: 50:         result = ((unsigned long) adc_high << 8) | ((unsigned long) adc
      +                          _low);
   643     0631  0832               	movf	_adc_low,w
   644     0632  00C3               	movwf	??_main
   645     0633  0833               	movf	_adc_low+1,w
   646     0634  00C4               	movwf	??_main+1
   647     0635  01C5               	clrf	??_main+2
   648     0636  01C6               	clrf	??_main+3
   649     0637  0830               	movf	_adc_high,w
   650     0638  00C7               	movwf	??_main+4
   651     0639  0831               	movf	_adc_high+1,w
   652     063A  00C8               	movwf	??_main+5
   653     063B  01C9               	clrf	??_main+6
   654     063C  01CA               	clrf	??_main+7
   655     063D  3008               	movlw	8
   656     063E                     u785:
   657     063E  1003               	clrc
   658     063F  0DC7               	rlf	??_main+4,f
   659     0640  0DC8               	rlf	??_main+5,f
   660     0641  0DC9               	rlf	??_main+6,f
   661     0642  0DCA               	rlf	??_main+7,f
   662     0643                     u780:
   663     0643  3EFF               	addlw	-1
   664     0644  1D03               	skipz
   665     0645  2E3E               	goto	u785
   666     0646  0843               	movf	??_main,w
   667     0647  0447               	iorwf	??_main+4,w
   668     0648  00A4               	movwf	_result
   669     0649  0844               	movf	??_main+1,w
   670     064A  0448               	iorwf	??_main+5,w
   671     064B  00A5               	movwf	_result+1
   672     064C  0845               	movf	??_main+2,w
   673     064D  0449               	iorwf	??_main+6,w
   674     064E  00A6               	movwf	_result+2
   675     064F  0846               	movf	??_main+3,w
   676     0650  044A               	iorwf	??_main+7,w
   677     0651  00A7               	movwf	_result+3
   678     0652                     l1079:
   679                           
   680                           ;ADC_TASK.c: 52:         volt = (unsigned long)((result * 100) / 1023);
   681     0652  3000               	movlw	0
   682     0653  00B9               	movwf	___lldiv@divisor+3
   683     0654  3000               	movlw	0
   684     0655  00B8               	movwf	___lldiv@divisor+2
   685     0656  3003               	movlw	3
   686     0657  00B7               	movwf	___lldiv@divisor+1
   687     0658  30FF               	movlw	255
   688     0659  00B6               	movwf	___lldiv@divisor
   689     065A  0827               	movf	_result+3,w
   690     065B  00F3               	movwf	___lmul@multiplier+3
   691     065C  0826               	movf	_result+2,w
   692     065D  00F2               	movwf	___lmul@multiplier+2
   693     065E  0825               	movf	_result+1,w
   694     065F  00F1               	movwf	___lmul@multiplier+1
   695     0660  0824               	movf	_result,w
   696     0661  00F0               	movwf	___lmul@multiplier
   697     0662  3000               	movlw	0
   698     0663  00F7               	movwf	___lmul@multiplicand+3
   699     0664  3000               	movlw	0
   700     0665  00F6               	movwf	___lmul@multiplicand+2
   701     0666  3000               	movlw	0
   702     0667  00F5               	movwf	___lmul@multiplicand+1
   703     0668  3064               	movlw	100
   704     0669  00F4               	movwf	___lmul@multiplicand
   705     066A  120A  118A  24D2  120A  118A  	fcall	___lmul
   706     066F  0873               	movf	?___lmul+3,w
   707     0670  1283               	bcf	3,5	;RP0=0, select bank0
   708     0671  1303               	bcf	3,6	;RP1=0, select bank0
   709     0672  00BD               	movwf	___lldiv@dividend+3
   710     0673  0872               	movf	?___lmul+2,w
   711     0674  00BC               	movwf	___lldiv@dividend+2
   712     0675  0871               	movf	?___lmul+1,w
   713     0676  00BB               	movwf	___lldiv@dividend+1
   714     0677  0870               	movf	?___lmul,w
   715     0678  00BA               	movwf	___lldiv@dividend
   716     0679  120A  118A  255F  120A  118A  	fcall	___lldiv
   717     067E  1283               	bcf	3,5	;RP0=0, select bank0
   718     067F  1303               	bcf	3,6	;RP1=0, select bank0
   719     0680  0839               	movf	?___lldiv+3,w
   720     0681  00A3               	movwf	_volt+3
   721     0682  0838               	movf	?___lldiv+2,w
   722     0683  00A2               	movwf	_volt+2
   723     0684  0837               	movf	?___lldiv+1,w
   724     0685  00A1               	movwf	_volt+1
   725     0686  0836               	movf	?___lldiv,w
   726     0687  00A0               	movwf	_volt
   727     0688                     l1081:
   728                           
   729                           ;ADC_TASK.c: 54:         lcd_command(0x89);
   730     0688  3089               	movlw	137
   731     0689  120A  118A  2452  120A  118A  	fcall	_lcd_command
   732     068E                     l1083:
   733                           
   734                           ;ADC_TASK.c: 55:         lcd_output(result);
   735     068E  1283               	bcf	3,5	;RP0=0, select bank0
   736     068F  1303               	bcf	3,6	;RP1=0, select bank0
   737     0690  0825               	movf	_result+1,w
   738     0691  00B7               	movwf	lcd_output@i+1
   739     0692  0824               	movf	_result,w
   740     0693  00B6               	movwf	lcd_output@i
   741     0694  120A  118A  26B9  120A  118A  	fcall	_lcd_output
   742     0699                     l1085:
   743                           
   744                           ;ADC_TASK.c: 57:         lcd_command(0xC9);
   745     0699  30C9               	movlw	201
   746     069A  120A  118A  2452  120A  118A  	fcall	_lcd_command
   747     069F                     l1087:
   748                           
   749                           ;ADC_TASK.c: 58:         lcd_output(volt);
   750     069F  1283               	bcf	3,5	;RP0=0, select bank0
   751     06A0  1303               	bcf	3,6	;RP1=0, select bank0
   752     06A1  0821               	movf	_volt+1,w
   753     06A2  00B7               	movwf	lcd_output@i+1
   754     06A3  0820               	movf	_volt,w
   755     06A4  00B6               	movwf	lcd_output@i
   756     06A5  120A  118A  26B9  120A  118A  	fcall	_lcd_output
   757     06AA                     l1089:
   758                           
   759                           ;ADC_TASK.c: 60:         _delay((unsigned long)((100)*(6000000/4000.0)));
   760     06AA  30C3               	movlw	195
   761     06AB  1283               	bcf	3,5	;RP0=0, select bank0
   762     06AC  1303               	bcf	3,6	;RP1=0, select bank0
   763     06AD  00C4               	movwf	??_main+1
   764     06AE  30CC               	movlw	204
   765     06AF  00C3               	movwf	??_main
   766     06B0                     u797:
   767     06B0  0BC3               	decfsz	??_main,f
   768     06B1  2EB0               	goto	u797
   769     06B2  0BC4               	decfsz	??_main+1,f
   770     06B3  2EB0               	goto	u797
   771     06B4  0000               	nop
   772     06B5  2E16               	goto	l1071
   773     06B6  120A  118A  2800   	ljmp	start
   774     06B9                     __end_of_main:
   775                           
   776                           	psect	text1
   777     06B9                     __ptext1:	
   778 ;; *************** function _lcd_output *****************
   779 ;; Defined at:
   780 ;;		line 101 in file "ADC_TASK.c"
   781 ;; Parameters:    Size  Location     Type
   782 ;;  i               2    0[BANK0 ] unsigned int 
   783 ;; Auto vars:     Size  Location     Type
   784 ;;  m               2    8[BANK0 ] unsigned int 
   785 ;; Return value:  Size  Location     Type
   786 ;;                  1    wreg      void 
   787 ;; Registers used:
   788 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   789 ;; Tracked objects:
   790 ;;		On entry : 0/0
   791 ;;		On exit  : 0/0
   792 ;;		Unchanged: 0/0
   793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   794 ;;      Params:         0       2       0       0       0
   795 ;;      Locals:         0       2       0       0       0
   796 ;;      Temps:          0       6       0       0       0
   797 ;;      Totals:         0      10       0       0       0
   798 ;;Total ram usage:       10 bytes
   799 ;; Hardware stack levels used: 1
   800 ;; Hardware stack levels required when called: 1
   801 ;; This function calls:
   802 ;;		___bmul
   803 ;;		___lwdiv
   804 ;;		___wmul
   805 ;;		_lcd_data
   806 ;; This function is called by:
   807 ;;		_main
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           
   811     06B9                     _lcd_output:	
   812                           ;psect for function _lcd_output
   813                           
   814     06B9                     l955:	
   815                           ;incstack = 0
   816                           ; Regs used in _lcd_output: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   817                           
   818                           
   819                           ;ADC_TASK.c: 102:     unsigned int m;;ADC_TASK.c: 103:     m = i;
   820     06B9  1283               	bcf	3,5	;RP0=0, select bank0
   821     06BA  1303               	bcf	3,6	;RP1=0, select bank0
   822     06BB  0837               	movf	lcd_output@i+1,w
   823     06BC  00BF               	movwf	lcd_output@m+1
   824     06BD  0836               	movf	lcd_output@i,w
   825     06BE  00BE               	movwf	lcd_output@m
   826     06BF                     l957:
   827                           
   828                           ;ADC_TASK.c: 104:     d4 = (unsigned char) (m / 1000);
   829     06BF  30E8               	movlw	232
   830     06C0  00F6               	movwf	___lwdiv@divisor
   831     06C1  3003               	movlw	3
   832     06C2  00F7               	movwf	___lwdiv@divisor+1
   833     06C3  083F               	movf	lcd_output@m+1,w
   834     06C4  00F9               	movwf	___lwdiv@dividend+1
   835     06C5  083E               	movf	lcd_output@m,w
   836     06C6  00F8               	movwf	___lwdiv@dividend
   837     06C7  120A  118A  248E  120A  118A  	fcall	___lwdiv
   838     06CC  0876               	movf	?___lwdiv,w
   839     06CD  1283               	bcf	3,5	;RP0=0, select bank0
   840     06CE  1303               	bcf	3,6	;RP1=0, select bank0
   841     06CF  00B8               	movwf	??_lcd_output
   842     06D0  01B9               	clrf	??_lcd_output+1
   843     06D1  0838               	movf	??_lcd_output,w
   844     06D2  00AC               	movwf	_d4
   845     06D3  0839               	movf	??_lcd_output+1,w
   846     06D4  00AD               	movwf	_d4+1
   847     06D5                     l959:
   848                           
   849                           ;ADC_TASK.c: 105:     d3 = (unsigned char) ((m - (d4 * 1000)) / 100);
   850     06D5  3064               	movlw	100
   851     06D6  00F6               	movwf	___lwdiv@divisor
   852     06D7  3000               	movlw	0
   853     06D8  00F7               	movwf	___lwdiv@divisor+1
   854     06D9  082D               	movf	_d4+1,w
   855     06DA  00F1               	movwf	___wmul@multiplier+1
   856     06DB  082C               	movf	_d4,w
   857     06DC  00F0               	movwf	___wmul@multiplier
   858     06DD  3018               	movlw	24
   859     06DE  00F2               	movwf	___wmul@multiplicand
   860     06DF  30FC               	movlw	252
   861     06E0  00F3               	movwf	___wmul@multiplicand+1
   862     06E1  120A  118A  2469  120A  118A  	fcall	___wmul
   863     06E6  1283               	bcf	3,5	;RP0=0, select bank0
   864     06E7  1303               	bcf	3,6	;RP1=0, select bank0
   865     06E8  083E               	movf	lcd_output@m,w
   866     06E9  0770               	addwf	?___wmul,w
   867     06EA  00F8               	movwf	___lwdiv@dividend
   868     06EB  083F               	movf	lcd_output@m+1,w
   869     06EC  1803               	skipnc
   870     06ED  0A3F               	incf	lcd_output@m+1,w
   871     06EE  0771               	addwf	?___wmul+1,w
   872     06EF  00F9               	movwf	___lwdiv@dividend+1
   873     06F0  120A  118A  248E  120A  118A  	fcall	___lwdiv
   874     06F5  0876               	movf	?___lwdiv,w
   875     06F6  1283               	bcf	3,5	;RP0=0, select bank0
   876     06F7  1303               	bcf	3,6	;RP1=0, select bank0
   877     06F8  00B8               	movwf	??_lcd_output
   878     06F9  01B9               	clrf	??_lcd_output+1
   879     06FA  0838               	movf	??_lcd_output,w
   880     06FB  00AE               	movwf	_d3
   881     06FC  0839               	movf	??_lcd_output+1,w
   882     06FD  00AF               	movwf	_d3+1
   883     06FE                     l961:
   884                           
   885                           ;ADC_TASK.c: 106:     d2 = (unsigned char) ((m - (d4 * 1000)-(d3 * 100)) / 10);
   886     06FE  300A               	movlw	10
   887     06FF  00F6               	movwf	___lwdiv@divisor
   888     0700  3000               	movlw	0
   889     0701  00F7               	movwf	___lwdiv@divisor+1
   890     0702  082D               	movf	_d4+1,w
   891     0703  00F1               	movwf	___wmul@multiplier+1
   892     0704  082C               	movf	_d4,w
   893     0705  00F0               	movwf	___wmul@multiplier
   894     0706  3018               	movlw	24
   895     0707  00F2               	movwf	___wmul@multiplicand
   896     0708  30FC               	movlw	252
   897     0709  00F3               	movwf	___wmul@multiplicand+1
   898     070A  120A  118A  2469  120A  118A  	fcall	___wmul
   899     070F  0870               	movf	?___wmul,w
   900     0710  1283               	bcf	3,5	;RP0=0, select bank0
   901     0711  1303               	bcf	3,6	;RP1=0, select bank0
   902     0712  00B8               	movwf	??_lcd_output
   903     0713  0871               	movf	?___wmul+1,w
   904     0714  00B9               	movwf	??_lcd_output+1
   905     0715  082F               	movf	_d3+1,w
   906     0716  00F1               	movwf	___wmul@multiplier+1
   907     0717  082E               	movf	_d3,w
   908     0718  00F0               	movwf	___wmul@multiplier
   909     0719  309C               	movlw	156
   910     071A  00F2               	movwf	___wmul@multiplicand
   911     071B  30FF               	movlw	255
   912     071C  00F3               	movwf	___wmul@multiplicand+1
   913     071D  120A  118A  2469  120A  118A  	fcall	___wmul
   914     0722  0870               	movf	?___wmul,w
   915     0723  1283               	bcf	3,5	;RP0=0, select bank0
   916     0724  1303               	bcf	3,6	;RP1=0, select bank0
   917     0725  0738               	addwf	??_lcd_output,w
   918     0726  00BA               	movwf	??_lcd_output+2
   919     0727  0871               	movf	?___wmul+1,w
   920     0728  1803               	skipnc
   921     0729  0A71               	incf	?___wmul+1,w
   922     072A  0739               	addwf	??_lcd_output+1,w
   923     072B  00BB               	movwf	??_lcd_output+3
   924     072C  083E               	movf	lcd_output@m,w
   925     072D  073A               	addwf	??_lcd_output+2,w
   926     072E  00F8               	movwf	___lwdiv@dividend
   927     072F  083F               	movf	lcd_output@m+1,w
   928     0730  1803               	skipnc
   929     0731  0A3F               	incf	lcd_output@m+1,w
   930     0732  073B               	addwf	??_lcd_output+3,w
   931     0733  00F9               	movwf	___lwdiv@dividend+1
   932     0734  120A  118A  248E  120A  118A  	fcall	___lwdiv
   933     0739  0876               	movf	?___lwdiv,w
   934     073A  1283               	bcf	3,5	;RP0=0, select bank0
   935     073B  1303               	bcf	3,6	;RP1=0, select bank0
   936     073C  00BC               	movwf	??_lcd_output+4
   937     073D  01BD               	clrf	??_lcd_output+5
   938     073E  083C               	movf	??_lcd_output+4,w
   939     073F  00A8               	movwf	_d2
   940     0740  083D               	movf	??_lcd_output+5,w
   941     0741  00A9               	movwf	_d2+1
   942     0742                     l963:
   943                           
   944                           ;ADC_TASK.c: 107:     d1 = (unsigned char) (m - (d4 * 1000)-(d3 * 100)-(d2 * 10));
   945     0742  3018               	movlw	24
   946     0743  00F0               	movwf	___bmul@multiplicand
   947     0744  082C               	movf	_d4,w
   948     0745  120A  118A  243D  120A  118A  	fcall	___bmul
   949     074A  1283               	bcf	3,5	;RP0=0, select bank0
   950     074B  1303               	bcf	3,6	;RP1=0, select bank0
   951     074C  00B8               	movwf	??_lcd_output
   952     074D  309C               	movlw	156
   953     074E  00F0               	movwf	___bmul@multiplicand
   954     074F  082E               	movf	_d3,w
   955     0750  120A  118A  243D  120A  118A  	fcall	___bmul
   956     0755  1283               	bcf	3,5	;RP0=0, select bank0
   957     0756  1303               	bcf	3,6	;RP1=0, select bank0
   958     0757  00B9               	movwf	??_lcd_output+1
   959     0758  30F6               	movlw	246
   960     0759  00F0               	movwf	___bmul@multiplicand
   961     075A  0828               	movf	_d2,w
   962     075B  120A  118A  243D  120A  118A  	fcall	___bmul
   963     0760  1283               	bcf	3,5	;RP0=0, select bank0
   964     0761  1303               	bcf	3,6	;RP1=0, select bank0
   965     0762  0739               	addwf	??_lcd_output+1,w
   966     0763  0738               	addwf	??_lcd_output,w
   967     0764  073E               	addwf	lcd_output@m,w
   968     0765  00BA               	movwf	??_lcd_output+2
   969     0766  01BB               	clrf	??_lcd_output+3
   970     0767  083A               	movf	??_lcd_output+2,w
   971     0768  00AA               	movwf	_d1
   972     0769  083B               	movf	??_lcd_output+3,w
   973     076A  00AB               	movwf	_d1+1
   974     076B                     l965:
   975                           
   976                           ;ADC_TASK.c: 110:     if (d4 > 0) {
   977     076B  082C               	movf	_d4,w
   978     076C  042D               	iorwf	_d4+1,w
   979     076D  1903               	btfsc	3,2
   980     076E  2F70               	goto	u531
   981     076F  2F71               	goto	u530
   982     0770                     u531:
   983     0770  2F79               	goto	l969
   984     0771                     u530:
   985     0771                     l967:
   986                           
   987                           ;ADC_TASK.c: 111:         lcd_data(0x30 + d4);
   988     0771  082C               	movf	_d4,w
   989     0772  3E30               	addlw	48
   990     0773  120A  118A  2429  120A  118A  	fcall	_lcd_data
   991                           
   992                           ;ADC_TASK.c: 112:     } else {
   993     0778  2F7F               	goto	l971
   994     0779                     l969:
   995                           
   996                           ;ADC_TASK.c: 113:         lcd_data(0x20);
   997     0779  3020               	movlw	32
   998     077A  120A  118A  2429  120A  118A  	fcall	_lcd_data
   999     077F                     l971:
  1000                           
  1001                           ;ADC_TASK.c: 116:     if (d3 > 0 || d4 > 0) {
  1002     077F  1283               	bcf	3,5	;RP0=0, select bank0
  1003     0780  1303               	bcf	3,6	;RP1=0, select bank0
  1004     0781  082E               	movf	_d3,w
  1005     0782  042F               	iorwf	_d3+1,w
  1006     0783  1D03               	btfss	3,2
  1007     0784  2F86               	goto	u541
  1008     0785  2F87               	goto	u540
  1009     0786                     u541:
  1010     0786  2F8D               	goto	l975
  1011     0787                     u540:
  1012     0787                     l973:
  1013     0787  082C               	movf	_d4,w
  1014     0788  042D               	iorwf	_d4+1,w
  1015     0789  1903               	btfsc	3,2
  1016     078A  2F8C               	goto	u551
  1017     078B  2F8D               	goto	u550
  1018     078C                     u551:
  1019     078C  2F95               	goto	l977
  1020     078D                     u550:
  1021     078D                     l975:
  1022                           
  1023                           ;ADC_TASK.c: 117:         lcd_data(0x30 + d3);
  1024     078D  082E               	movf	_d3,w
  1025     078E  3E30               	addlw	48
  1026     078F  120A  118A  2429  120A  118A  	fcall	_lcd_data
  1027                           
  1028                           ;ADC_TASK.c: 118:     } else {
  1029     0794  2F9B               	goto	l979
  1030     0795                     l977:
  1031                           
  1032                           ;ADC_TASK.c: 119:         lcd_data(0x20);
  1033     0795  3020               	movlw	32
  1034     0796  120A  118A  2429  120A  118A  	fcall	_lcd_data
  1035     079B                     l979:
  1036                           
  1037                           ;ADC_TASK.c: 122:     if (d2 > 0 || d3 > 0 || d4 > 0) {
  1038     079B  1283               	bcf	3,5	;RP0=0, select bank0
  1039     079C  1303               	bcf	3,6	;RP1=0, select bank0
  1040     079D  0828               	movf	_d2,w
  1041     079E  0429               	iorwf	_d2+1,w
  1042     079F  1D03               	btfss	3,2
  1043     07A0  2FA2               	goto	u561
  1044     07A1  2FA3               	goto	u560
  1045     07A2                     u561:
  1046     07A2  2FAF               	goto	l985
  1047     07A3                     u560:
  1048     07A3                     l981:
  1049     07A3  082E               	movf	_d3,w
  1050     07A4  042F               	iorwf	_d3+1,w
  1051     07A5  1D03               	btfss	3,2
  1052     07A6  2FA8               	goto	u571
  1053     07A7  2FA9               	goto	u570
  1054     07A8                     u571:
  1055     07A8  2FAF               	goto	l985
  1056     07A9                     u570:
  1057     07A9                     l983:
  1058     07A9  082C               	movf	_d4,w
  1059     07AA  042D               	iorwf	_d4+1,w
  1060     07AB  1903               	btfsc	3,2
  1061     07AC  2FAE               	goto	u581
  1062     07AD  2FAF               	goto	u580
  1063     07AE                     u581:
  1064     07AE  2FB7               	goto	l987
  1065     07AF                     u580:
  1066     07AF                     l985:
  1067                           
  1068                           ;ADC_TASK.c: 123:         lcd_data(0x30 + d2);
  1069     07AF  0828               	movf	_d2,w
  1070     07B0  3E30               	addlw	48
  1071     07B1  120A  118A  2429  120A  118A  	fcall	_lcd_data
  1072                           
  1073                           ;ADC_TASK.c: 124:     } else {
  1074     07B6  2FBD               	goto	l989
  1075     07B7                     l987:
  1076                           
  1077                           ;ADC_TASK.c: 125:         lcd_data(0x20);
  1078     07B7  3020               	movlw	32
  1079     07B8  120A  118A  2429  120A  118A  	fcall	_lcd_data
  1080     07BD                     l989:
  1081                           
  1082                           ;ADC_TASK.c: 128:     if (d4 > 0 || d3 > 0 || d2 > 0 || d1 > 0) {
  1083     07BD  1283               	bcf	3,5	;RP0=0, select bank0
  1084     07BE  1303               	bcf	3,6	;RP1=0, select bank0
  1085     07BF  082C               	movf	_d4,w
  1086     07C0  042D               	iorwf	_d4+1,w
  1087     07C1  1D03               	btfss	3,2
  1088     07C2  2FC4               	goto	u591
  1089     07C3  2FC5               	goto	u590
  1090     07C4                     u591:
  1091     07C4  2FD7               	goto	l997
  1092     07C5                     u590:
  1093     07C5                     l991:
  1094     07C5  082E               	movf	_d3,w
  1095     07C6  042F               	iorwf	_d3+1,w
  1096     07C7  1D03               	btfss	3,2
  1097     07C8  2FCA               	goto	u601
  1098     07C9  2FCB               	goto	u600
  1099     07CA                     u601:
  1100     07CA  2FD7               	goto	l997
  1101     07CB                     u600:
  1102     07CB                     l993:
  1103     07CB  0828               	movf	_d2,w
  1104     07CC  0429               	iorwf	_d2+1,w
  1105     07CD  1D03               	btfss	3,2
  1106     07CE  2FD0               	goto	u611
  1107     07CF  2FD1               	goto	u610
  1108     07D0                     u611:
  1109     07D0  2FD7               	goto	l997
  1110     07D1                     u610:
  1111     07D1                     l995:
  1112     07D1  082A               	movf	_d1,w
  1113     07D2  042B               	iorwf	_d1+1,w
  1114     07D3  1903               	btfsc	3,2
  1115     07D4  2FD6               	goto	u621
  1116     07D5  2FD7               	goto	u620
  1117     07D6                     u621:
  1118     07D6  2FDF               	goto	l999
  1119     07D7                     u620:
  1120     07D7                     l997:
  1121                           
  1122                           ;ADC_TASK.c: 129:         lcd_data(0x30 + d1);
  1123     07D7  082A               	movf	_d1,w
  1124     07D8  3E30               	addlw	48
  1125     07D9  120A  118A  2429  120A  118A  	fcall	_lcd_data
  1126                           
  1127                           ;ADC_TASK.c: 130:     } else {
  1128     07DE  2FE5               	goto	l91
  1129     07DF                     l999:
  1130                           
  1131                           ;ADC_TASK.c: 131:         lcd_data(0x20);
  1132     07DF  3020               	movlw	32
  1133     07E0  120A  118A  2429  120A  118A  	fcall	_lcd_data
  1134     07E5                     l91:
  1135     07E5  0008               	return
  1136     07E6                     __end_of_lcd_output:
  1137                           
  1138                           	psect	text2
  1139     0429                     __ptext2:	
  1140 ;; *************** function _lcd_data *****************
  1141 ;; Defined at:
  1142 ;;		line 93 in file "ADC_TASK.c"
  1143 ;; Parameters:    Size  Location     Type
  1144 ;;  i               1    wreg     unsigned char 
  1145 ;; Auto vars:     Size  Location     Type
  1146 ;;  i               1    2[COMMON] unsigned char 
  1147 ;; Return value:  Size  Location     Type
  1148 ;;                  1    wreg      void 
  1149 ;; Registers used:
  1150 ;;		wreg, status,2, status,0, btemp+1
  1151 ;; Tracked objects:
  1152 ;;		On entry : 0/0
  1153 ;;		On exit  : 0/0
  1154 ;;		Unchanged: 0/0
  1155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1156 ;;      Params:         0       0       0       0       0
  1157 ;;      Locals:         1       0       0       0       0
  1158 ;;      Temps:          2       0       0       0       0
  1159 ;;      Totals:         3       0       0       0       0
  1160 ;;Total ram usage:        3 bytes
  1161 ;; Hardware stack levels used: 1
  1162 ;; This function calls:
  1163 ;;		Nothing
  1164 ;; This function is called by:
  1165 ;;		_main
  1166 ;;		_lcd_output
  1167 ;; This function uses a non-reentrant model
  1168 ;;
  1169                           
  1170     0429                     _lcd_data:	
  1171                           ;psect for function _lcd_data
  1172                           
  1173                           
  1174                           ;incstack = 0
  1175                           ; Regs used in _lcd_data: [wreg+status,2+status,0+btemp+1]
  1176                           ;lcd_data@i stored from wreg
  1177     0429  00F2               	movwf	lcd_data@i
  1178     042A                     l871:
  1179                           
  1180                           ;ADC_TASK.c: 94:     PORTC |= (0x04);
  1181     042A  1283               	bcf	3,5	;RP0=0, select bank0
  1182     042B  1303               	bcf	3,6	;RP1=0, select bank0
  1183     042C  1507               	bsf	7,2	;volatile
  1184     042D                     l873:
  1185                           
  1186                           ;ADC_TASK.c: 95:     PORTD = i;
  1187     042D  0872               	movf	lcd_data@i,w
  1188     042E  0088               	movwf	8	;volatile
  1189     042F                     l875:
  1190                           
  1191                           ;ADC_TASK.c: 96:     PORTC |= 0x01;
  1192     042F  1407               	bsf	7,0	;volatile
  1193     0430                     l877:
  1194                           
  1195                           ;ADC_TASK.c: 97:     PORTC &= ~0x01;
  1196     0430  30FE               	movlw	254
  1197     0431  00FF               	movwf	btemp+1
  1198     0432  087F               	movf	btemp+1,w
  1199     0433  0587               	andwf	7,f	;volatile
  1200     0434                     l879:
  1201                           
  1202                           ;ADC_TASK.c: 98:     _delay((unsigned long)((100)*(6000000/4000.0)));
  1203     0434  30C3               	movlw	195
  1204     0435  00F1               	movwf	??_lcd_data+1
  1205     0436  30CD               	movlw	205
  1206     0437  00F0               	movwf	??_lcd_data
  1207     0438                     u807:
  1208     0438  0BF0               	decfsz	??_lcd_data,f
  1209     0439  2C38               	goto	u807
  1210     043A  0BF1               	decfsz	??_lcd_data+1,f
  1211     043B  2C38               	goto	u807
  1212     043C                     l74:
  1213     043C  0008               	return
  1214     043D                     __end_of_lcd_data:
  1215                           
  1216                           	psect	text3
  1217     0469                     __ptext3:	
  1218 ;; *************** function ___wmul *****************
  1219 ;; Defined at:
  1220 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  1221 ;; Parameters:    Size  Location     Type
  1222 ;;  multiplier      2    0[COMMON] unsigned int 
  1223 ;;  multiplicand    2    2[COMMON] unsigned int 
  1224 ;; Auto vars:     Size  Location     Type
  1225 ;;  product         2    4[COMMON] unsigned int 
  1226 ;; Return value:  Size  Location     Type
  1227 ;;                  2    0[COMMON] unsigned int 
  1228 ;; Registers used:
  1229 ;;		wreg, status,2, status,0
  1230 ;; Tracked objects:
  1231 ;;		On entry : 0/0
  1232 ;;		On exit  : 0/0
  1233 ;;		Unchanged: 0/0
  1234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1235 ;;      Params:         4       0       0       0       0
  1236 ;;      Locals:         2       0       0       0       0
  1237 ;;      Temps:          0       0       0       0       0
  1238 ;;      Totals:         6       0       0       0       0
  1239 ;;Total ram usage:        6 bytes
  1240 ;; Hardware stack levels used: 1
  1241 ;; This function calls:
  1242 ;;		Nothing
  1243 ;; This function is called by:
  1244 ;;		_lcd_output
  1245 ;; This function uses a non-reentrant model
  1246 ;;
  1247                           
  1248     0469                     ___wmul:	
  1249                           ;psect for function ___wmul
  1250                           
  1251     0469                     l881:	
  1252                           ;incstack = 0
  1253                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1254                           
  1255     0469  01F4               	clrf	___wmul@product
  1256     046A  01F5               	clrf	___wmul@product+1
  1257     046B                     l883:
  1258     046B  1C70               	btfss	___wmul@multiplier,0
  1259     046C  2C6E               	goto	u401
  1260     046D  2C6F               	goto	u400
  1261     046E                     u401:
  1262     046E  2C75               	goto	l177
  1263     046F                     u400:
  1264     046F                     l885:
  1265     046F  0872               	movf	___wmul@multiplicand,w
  1266     0470  07F4               	addwf	___wmul@product,f
  1267     0471  1803               	skipnc
  1268     0472  0AF5               	incf	___wmul@product+1,f
  1269     0473  0873               	movf	___wmul@multiplicand+1,w
  1270     0474  07F5               	addwf	___wmul@product+1,f
  1271     0475                     l177:
  1272     0475  3001               	movlw	1
  1273     0476                     u415:
  1274     0476  1003               	clrc
  1275     0477  0DF2               	rlf	___wmul@multiplicand,f
  1276     0478  0DF3               	rlf	___wmul@multiplicand+1,f
  1277     0479  3EFF               	addlw	-1
  1278     047A  1D03               	skipz
  1279     047B  2C76               	goto	u415
  1280     047C                     l887:
  1281     047C  3001               	movlw	1
  1282     047D                     u425:
  1283     047D  1003               	clrc
  1284     047E  0CF1               	rrf	___wmul@multiplier+1,f
  1285     047F  0CF0               	rrf	___wmul@multiplier,f
  1286     0480  3EFF               	addlw	-1
  1287     0481  1D03               	skipz
  1288     0482  2C7D               	goto	u425
  1289     0483                     l889:
  1290     0483  0870               	movf	___wmul@multiplier,w
  1291     0484  0471               	iorwf	___wmul@multiplier+1,w
  1292     0485  1D03               	btfss	3,2
  1293     0486  2C88               	goto	u431
  1294     0487  2C89               	goto	u430
  1295     0488                     u431:
  1296     0488  2C6B               	goto	l883
  1297     0489                     u430:
  1298     0489                     l891:
  1299     0489  0875               	movf	___wmul@product+1,w
  1300     048A  00F1               	movwf	?___wmul+1
  1301     048B  0874               	movf	___wmul@product,w
  1302     048C  00F0               	movwf	?___wmul
  1303     048D                     l179:
  1304     048D  0008               	return
  1305     048E                     __end_of___wmul:
  1306                           
  1307                           	psect	text4
  1308     048E                     __ptext4:	
  1309 ;; *************** function ___lwdiv *****************
  1310 ;; Defined at:
  1311 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\lwdiv.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;  divisor         2    6[COMMON] unsigned int 
  1314 ;;  dividend        2    8[COMMON] unsigned int 
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;  quotient        2   10[COMMON] unsigned int 
  1317 ;;  counter         1   12[COMMON] unsigned char 
  1318 ;; Return value:  Size  Location     Type
  1319 ;;                  2    6[COMMON] unsigned int 
  1320 ;; Registers used:
  1321 ;;		wreg, status,2, status,0, btemp+1
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1327 ;;      Params:         4       0       0       0       0
  1328 ;;      Locals:         3       0       0       0       0
  1329 ;;      Temps:          0       0       0       0       0
  1330 ;;      Totals:         7       0       0       0       0
  1331 ;;Total ram usage:        7 bytes
  1332 ;; Hardware stack levels used: 1
  1333 ;; This function calls:
  1334 ;;		Nothing
  1335 ;; This function is called by:
  1336 ;;		_lcd_output
  1337 ;; This function uses a non-reentrant model
  1338 ;;
  1339                           
  1340     048E                     ___lwdiv:	
  1341                           ;psect for function ___lwdiv
  1342                           
  1343     048E                     l911:	
  1344                           ;incstack = 0
  1345                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  1346                           
  1347     048E  01FA               	clrf	___lwdiv@quotient
  1348     048F  01FB               	clrf	___lwdiv@quotient+1
  1349     0490                     l913:
  1350     0490  0876               	movf	___lwdiv@divisor,w
  1351     0491  0477               	iorwf	___lwdiv@divisor+1,w
  1352     0492  1903               	btfsc	3,2
  1353     0493  2C95               	goto	u461
  1354     0494  2C96               	goto	u460
  1355     0495                     u461:
  1356     0495  2CCD               	goto	l933
  1357     0496                     u460:
  1358     0496                     l915:
  1359     0496  01FC               	clrf	___lwdiv@counter
  1360     0497  0AFC               	incf	___lwdiv@counter,f
  1361     0498  2CA4               	goto	l921
  1362     0499                     l917:
  1363     0499  3001               	movlw	1
  1364     049A                     u475:
  1365     049A  1003               	clrc
  1366     049B  0DF6               	rlf	___lwdiv@divisor,f
  1367     049C  0DF7               	rlf	___lwdiv@divisor+1,f
  1368     049D  3EFF               	addlw	-1
  1369     049E  1D03               	skipz
  1370     049F  2C9A               	goto	u475
  1371     04A0                     l919:
  1372     04A0  3001               	movlw	1
  1373     04A1  00FF               	movwf	btemp+1
  1374     04A2  087F               	movf	btemp+1,w
  1375     04A3  07FC               	addwf	___lwdiv@counter,f
  1376     04A4                     l921:
  1377     04A4  1FF7               	btfss	___lwdiv@divisor+1,7
  1378     04A5  2CA7               	goto	u481
  1379     04A6  2CA8               	goto	u480
  1380     04A7                     u481:
  1381     04A7  2C99               	goto	l917
  1382     04A8                     u480:
  1383     04A8                     l923:
  1384     04A8  3001               	movlw	1
  1385     04A9                     u495:
  1386     04A9  1003               	clrc
  1387     04AA  0DFA               	rlf	___lwdiv@quotient,f
  1388     04AB  0DFB               	rlf	___lwdiv@quotient+1,f
  1389     04AC  3EFF               	addlw	-1
  1390     04AD  1D03               	skipz
  1391     04AE  2CA9               	goto	u495
  1392     04AF  0877               	movf	___lwdiv@divisor+1,w
  1393     04B0  0279               	subwf	___lwdiv@dividend+1,w
  1394     04B1  1D03               	skipz
  1395     04B2  2CB5               	goto	u505
  1396     04B3  0876               	movf	___lwdiv@divisor,w
  1397     04B4  0278               	subwf	___lwdiv@dividend,w
  1398     04B5                     u505:
  1399     04B5  1C03               	skipc
  1400     04B6  2CB8               	goto	u501
  1401     04B7  2CB9               	goto	u500
  1402     04B8                     u501:
  1403     04B8  2CC0               	goto	l929
  1404     04B9                     u500:
  1405     04B9                     l925:
  1406     04B9  0876               	movf	___lwdiv@divisor,w
  1407     04BA  02F8               	subwf	___lwdiv@dividend,f
  1408     04BB  0877               	movf	___lwdiv@divisor+1,w
  1409     04BC  1C03               	skipc
  1410     04BD  03F9               	decf	___lwdiv@dividend+1,f
  1411     04BE  02F9               	subwf	___lwdiv@dividend+1,f
  1412     04BF                     l927:
  1413     04BF  147A               	bsf	___lwdiv@quotient,0
  1414     04C0                     l929:
  1415     04C0  3001               	movlw	1
  1416     04C1                     u515:
  1417     04C1  1003               	clrc
  1418     04C2  0CF7               	rrf	___lwdiv@divisor+1,f
  1419     04C3  0CF6               	rrf	___lwdiv@divisor,f
  1420     04C4  3EFF               	addlw	-1
  1421     04C5  1D03               	skipz
  1422     04C6  2CC1               	goto	u515
  1423     04C7                     l931:
  1424     04C7  3001               	movlw	1
  1425     04C8  02FC               	subwf	___lwdiv@counter,f
  1426     04C9  1D03               	btfss	3,2
  1427     04CA  2CCC               	goto	u521
  1428     04CB  2CCD               	goto	u520
  1429     04CC                     u521:
  1430     04CC  2CA8               	goto	l923
  1431     04CD                     u520:
  1432     04CD                     l933:
  1433     04CD  087B               	movf	___lwdiv@quotient+1,w
  1434     04CE  00F7               	movwf	?___lwdiv+1
  1435     04CF  087A               	movf	___lwdiv@quotient,w
  1436     04D0  00F6               	movwf	?___lwdiv
  1437     04D1                     l457:
  1438     04D1  0008               	return
  1439     04D2                     __end_of___lwdiv:
  1440                           
  1441                           	psect	text5
  1442     043D                     __ptext5:	
  1443 ;; *************** function ___bmul *****************
  1444 ;; Defined at:
  1445 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul8.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;  multiplier      1    wreg     unsigned char 
  1448 ;;  multiplicand    1    0[COMMON] unsigned char 
  1449 ;; Auto vars:     Size  Location     Type
  1450 ;;  multiplier      1    2[COMMON] unsigned char 
  1451 ;;  product         1    1[COMMON] unsigned char 
  1452 ;; Return value:  Size  Location     Type
  1453 ;;                  1    wreg      unsigned char 
  1454 ;; Registers used:
  1455 ;;		wreg, status,2, status,0, btemp+1
  1456 ;; Tracked objects:
  1457 ;;		On entry : 0/0
  1458 ;;		On exit  : 0/0
  1459 ;;		Unchanged: 0/0
  1460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1461 ;;      Params:         1       0       0       0       0
  1462 ;;      Locals:         2       0       0       0       0
  1463 ;;      Temps:          0       0       0       0       0
  1464 ;;      Totals:         3       0       0       0       0
  1465 ;;Total ram usage:        3 bytes
  1466 ;; Hardware stack levels used: 1
  1467 ;; This function calls:
  1468 ;;		Nothing
  1469 ;; This function is called by:
  1470 ;;		_lcd_output
  1471 ;; This function uses a non-reentrant model
  1472 ;;
  1473                           
  1474     043D                     ___bmul:	
  1475                           ;psect for function ___bmul
  1476                           
  1477                           
  1478                           ;incstack = 0
  1479                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  1480                           ;___bmul@multiplier stored from wreg
  1481     043D  00F2               	movwf	___bmul@multiplier
  1482     043E                     l895:
  1483     043E  01F1               	clrf	___bmul@product
  1484     043F                     l897:
  1485     043F  1C72               	btfss	___bmul@multiplier,0
  1486     0440  2C42               	goto	u441
  1487     0441  2C43               	goto	u440
  1488     0442                     u441:
  1489     0442  2C47               	goto	l901
  1490     0443                     u440:
  1491     0443                     l899:
  1492     0443  0870               	movf	___bmul@multiplicand,w
  1493     0444  00FF               	movwf	btemp+1
  1494     0445  087F               	movf	btemp+1,w
  1495     0446  07F1               	addwf	___bmul@product,f
  1496     0447                     l901:
  1497     0447  1003               	clrc
  1498     0448  0DF0               	rlf	___bmul@multiplicand,f
  1499     0449                     l903:
  1500     0449  1003               	clrc
  1501     044A  0CF2               	rrf	___bmul@multiplier,f
  1502     044B                     l905:
  1503     044B  0872               	movf	___bmul@multiplier,w
  1504     044C  1D03               	btfss	3,2
  1505     044D  2C4F               	goto	u451
  1506     044E  2C50               	goto	u450
  1507     044F                     u451:
  1508     044F  2C3F               	goto	l897
  1509     0450                     u450:
  1510     0450                     l907:
  1511     0450  0871               	movf	___bmul@product,w
  1512     0451                     l203:
  1513     0451  0008               	return
  1514     0452                     __end_of___bmul:
  1515                           
  1516                           	psect	text6
  1517     0518                     __ptext6:	
  1518 ;; *************** function _lcd_init *****************
  1519 ;; Defined at:
  1520 ;;		line 64 in file "ADC_TASK.c"
  1521 ;; Parameters:    Size  Location     Type
  1522 ;;		None
  1523 ;; Auto vars:     Size  Location     Type
  1524 ;;		None
  1525 ;; Return value:  Size  Location     Type
  1526 ;;                  1    wreg      void 
  1527 ;; Registers used:
  1528 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1529 ;; Tracked objects:
  1530 ;;		On entry : 0/0
  1531 ;;		On exit  : 0/0
  1532 ;;		Unchanged: 0/0
  1533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1534 ;;      Params:         0       0       0       0       0
  1535 ;;      Locals:         0       0       0       0       0
  1536 ;;      Temps:          2       0       0       0       0
  1537 ;;      Totals:         2       0       0       0       0
  1538 ;;Total ram usage:        2 bytes
  1539 ;; Hardware stack levels used: 1
  1540 ;; Hardware stack levels required when called: 1
  1541 ;; This function calls:
  1542 ;;		_lcd_command
  1543 ;; This function is called by:
  1544 ;;		_main
  1545 ;; This function uses a non-reentrant model
  1546 ;;
  1547                           
  1548     0518                     _lcd_init:	
  1549                           ;psect for function _lcd_init
  1550                           
  1551     0518                     l937:	
  1552                           ;incstack = 0
  1553                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1554                           
  1555                           
  1556                           ;ADC_TASK.c: 66:     TRISA = 0x04;
  1557     0518  3004               	movlw	4
  1558     0519  1683               	bsf	3,5	;RP0=1, select bank1
  1559     051A  1303               	bcf	3,6	;RP1=0, select bank1
  1560     051B  0085               	movwf	5	;volatile
  1561     051C                     l939:
  1562                           
  1563                           ;ADC_TASK.c: 67:     TRISC = 0x00;
  1564     051C  0187               	clrf	7	;volatile
  1565     051D                     l941:
  1566                           
  1567                           ;ADC_TASK.c: 68:     TRISD = 0x00;
  1568     051D  0188               	clrf	8	;volatile
  1569                           
  1570                           ;ADC_TASK.c: 71:     ADCON0 = 0x91;
  1571     051E  3091               	movlw	145
  1572     051F  1283               	bcf	3,5	;RP0=0, select bank0
  1573     0520  1303               	bcf	3,6	;RP1=0, select bank0
  1574     0521  009F               	movwf	31	;volatile
  1575                           
  1576                           ;ADC_TASK.c: 72:     ADCON1 = 0x89;
  1577     0522  3089               	movlw	137
  1578     0523  1683               	bsf	3,5	;RP0=1, select bank1
  1579     0524  1303               	bcf	3,6	;RP1=0, select bank1
  1580     0525  009F               	movwf	31	;volatile
  1581     0526                     l943:
  1582                           
  1583                           ;ADC_TASK.c: 75:     lcd_command(0x38);
  1584     0526  3038               	movlw	56
  1585     0527  120A  118A  2452  120A  118A  	fcall	_lcd_command
  1586     052C                     l945:
  1587                           
  1588                           ;ADC_TASK.c: 76:     _delay((unsigned long)((100)*(6000000/4000.0)));
  1589     052C  30C3               	movlw	195
  1590     052D  00F4               	movwf	??_lcd_init+1
  1591     052E  30CD               	movlw	205
  1592     052F  00F3               	movwf	??_lcd_init
  1593     0530                     u817:
  1594     0530  0BF3               	decfsz	??_lcd_init,f
  1595     0531  2D30               	goto	u817
  1596     0532  0BF4               	decfsz	??_lcd_init+1,f
  1597     0533  2D30               	goto	u817
  1598                           
  1599                           ;ADC_TASK.c: 77:     lcd_command(0x06);
  1600     0534  3006               	movlw	6
  1601     0535  120A  118A  2452  120A  118A  	fcall	_lcd_command
  1602     053A                     l947:
  1603                           
  1604                           ;ADC_TASK.c: 78:     _delay((unsigned long)((100)*(6000000/4000.0)));
  1605     053A  30C3               	movlw	195
  1606     053B  00F4               	movwf	??_lcd_init+1
  1607     053C  30CD               	movlw	205
  1608     053D  00F3               	movwf	??_lcd_init
  1609     053E                     u827:
  1610     053E  0BF3               	decfsz	??_lcd_init,f
  1611     053F  2D3E               	goto	u827
  1612     0540  0BF4               	decfsz	??_lcd_init+1,f
  1613     0541  2D3E               	goto	u827
  1614     0542                     l949:
  1615                           
  1616                           ;ADC_TASK.c: 79:     lcd_command(0x0C);
  1617     0542  300C               	movlw	12
  1618     0543  120A  118A  2452  120A  118A  	fcall	_lcd_command
  1619                           
  1620                           ;ADC_TASK.c: 80:     _delay((unsigned long)((100)*(6000000/4000.0)));
  1621     0548  30C3               	movlw	195
  1622     0549  00F4               	movwf	??_lcd_init+1
  1623     054A  30CD               	movlw	205
  1624     054B  00F3               	movwf	??_lcd_init
  1625     054C                     u837:
  1626     054C  0BF3               	decfsz	??_lcd_init,f
  1627     054D  2D4C               	goto	u837
  1628     054E  0BF4               	decfsz	??_lcd_init+1,f
  1629     054F  2D4C               	goto	u837
  1630     0550                     l951:
  1631                           
  1632                           ;ADC_TASK.c: 81:     lcd_command(0x01);
  1633     0550  3001               	movlw	1
  1634     0551  120A  118A  2452  120A  118A  	fcall	_lcd_command
  1635     0556                     l953:
  1636                           
  1637                           ;ADC_TASK.c: 82:     _delay((unsigned long)((100)*(6000000/4000.0)));
  1638     0556  30C3               	movlw	195
  1639     0557  00F4               	movwf	??_lcd_init+1
  1640     0558  30CD               	movlw	205
  1641     0559  00F3               	movwf	??_lcd_init
  1642     055A                     u847:
  1643     055A  0BF3               	decfsz	??_lcd_init,f
  1644     055B  2D5A               	goto	u847
  1645     055C  0BF4               	decfsz	??_lcd_init+1,f
  1646     055D  2D5A               	goto	u847
  1647     055E                     l68:
  1648     055E  0008               	return
  1649     055F                     __end_of_lcd_init:
  1650                           
  1651                           	psect	text7
  1652     0452                     __ptext7:	
  1653 ;; *************** function _lcd_command *****************
  1654 ;; Defined at:
  1655 ;;		line 85 in file "ADC_TASK.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;  i               1    wreg     unsigned char 
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;  i               1    2[COMMON] unsigned char 
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  1    wreg      void 
  1662 ;; Registers used:
  1663 ;;		wreg, status,2, status,0, btemp+1
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1669 ;;      Params:         0       0       0       0       0
  1670 ;;      Locals:         1       0       0       0       0
  1671 ;;      Temps:          2       0       0       0       0
  1672 ;;      Totals:         3       0       0       0       0
  1673 ;;Total ram usage:        3 bytes
  1674 ;; Hardware stack levels used: 1
  1675 ;; This function calls:
  1676 ;;		Nothing
  1677 ;; This function is called by:
  1678 ;;		_main
  1679 ;;		_lcd_init
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683     0452                     _lcd_command:	
  1684                           ;psect for function _lcd_command
  1685                           
  1686                           
  1687                           ;incstack = 0
  1688                           ; Regs used in _lcd_command: [wreg+status,2+status,0+btemp+1]
  1689                           ;lcd_command@i stored from wreg
  1690     0452  00F2               	movwf	lcd_command@i
  1691     0453                     l863:
  1692                           
  1693                           ;ADC_TASK.c: 86:     PORTC &= ~(0x04);
  1694     0453  30FB               	movlw	251
  1695     0454  00FF               	movwf	btemp+1
  1696     0455  087F               	movf	btemp+1,w
  1697     0456  1283               	bcf	3,5	;RP0=0, select bank0
  1698     0457  1303               	bcf	3,6	;RP1=0, select bank0
  1699     0458  0587               	andwf	7,f	;volatile
  1700     0459                     l865:
  1701                           
  1702                           ;ADC_TASK.c: 87:     PORTD = i;
  1703     0459  0872               	movf	lcd_command@i,w
  1704     045A  0088               	movwf	8	;volatile
  1705     045B                     l867:
  1706                           
  1707                           ;ADC_TASK.c: 88:     PORTC |= 0x01;
  1708     045B  1407               	bsf	7,0	;volatile
  1709     045C                     l869:
  1710                           
  1711                           ;ADC_TASK.c: 89:     PORTC &= ~0x01;
  1712     045C  30FE               	movlw	254
  1713     045D  00FF               	movwf	btemp+1
  1714     045E  087F               	movf	btemp+1,w
  1715     045F  0587               	andwf	7,f	;volatile
  1716                           
  1717                           ;ADC_TASK.c: 90:     _delay((unsigned long)((100)*(6000000/4000.0)));
  1718     0460  30C3               	movlw	195
  1719     0461  00F1               	movwf	??_lcd_command+1
  1720     0462  30CD               	movlw	205
  1721     0463  00F0               	movwf	??_lcd_command
  1722     0464                     u857:
  1723     0464  0BF0               	decfsz	??_lcd_command,f
  1724     0465  2C64               	goto	u857
  1725     0466  0BF1               	decfsz	??_lcd_command+1,f
  1726     0467  2C64               	goto	u857
  1727     0468                     l71:
  1728     0468  0008               	return
  1729     0469                     __end_of_lcd_command:
  1730                           
  1731                           	psect	text8
  1732     04D2                     __ptext8:	
  1733 ;; *************** function ___lmul *****************
  1734 ;; Defined at:
  1735 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul32.c"
  1736 ;; Parameters:    Size  Location     Type
  1737 ;;  multiplier      4    0[COMMON] unsigned long 
  1738 ;;  multiplicand    4    4[COMMON] unsigned long 
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;  product         4    9[COMMON] unsigned long 
  1741 ;; Return value:  Size  Location     Type
  1742 ;;                  4    0[COMMON] unsigned long 
  1743 ;; Registers used:
  1744 ;;		wreg, status,2, status,0
  1745 ;; Tracked objects:
  1746 ;;		On entry : 0/0
  1747 ;;		On exit  : 0/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1750 ;;      Params:         8       0       0       0       0
  1751 ;;      Locals:         4       0       0       0       0
  1752 ;;      Temps:          1       0       0       0       0
  1753 ;;      Totals:        13       0       0       0       0
  1754 ;;Total ram usage:       13 bytes
  1755 ;; Hardware stack levels used: 1
  1756 ;; This function calls:
  1757 ;;		Nothing
  1758 ;; This function is called by:
  1759 ;;		_main
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763     04D2                     ___lmul:	
  1764                           ;psect for function ___lmul
  1765                           
  1766     04D2                     l1001:	
  1767                           ;incstack = 0
  1768                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1769                           
  1770     04D2  3000               	movlw	0
  1771     04D3  00FC               	movwf	___lmul@product+3
  1772     04D4  3000               	movlw	0
  1773     04D5  00FB               	movwf	___lmul@product+2
  1774     04D6  3000               	movlw	0
  1775     04D7  00FA               	movwf	___lmul@product+1
  1776     04D8  3000               	movlw	0
  1777     04D9  00F9               	movwf	___lmul@product
  1778     04DA                     l1003:
  1779     04DA  1C70               	btfss	___lmul@multiplier,0
  1780     04DB  2CDD               	goto	u631
  1781     04DC  2CDE               	goto	u630
  1782     04DD                     u631:
  1783     04DD  2CF5               	goto	l1007
  1784     04DE                     u630:
  1785     04DE                     l1005:
  1786     04DE  0874               	movf	___lmul@multiplicand,w
  1787     04DF  07F9               	addwf	___lmul@product,f
  1788     04E0  0875               	movf	___lmul@multiplicand+1,w
  1789     04E1  1103               	clrz
  1790     04E2  1803               	skipnc
  1791     04E3  3E01               	addlw	1
  1792     04E4  1903               	skipnz
  1793     04E5  2CE7               	goto	u641
  1794     04E6  07FA               	addwf	___lmul@product+1,f
  1795     04E7                     u641:
  1796     04E7  0876               	movf	___lmul@multiplicand+2,w
  1797     04E8  1103               	clrz
  1798     04E9  1803               	skipnc
  1799     04EA  3E01               	addlw	1
  1800     04EB  1903               	skipnz
  1801     04EC  2CEE               	goto	u642
  1802     04ED  07FB               	addwf	___lmul@product+2,f
  1803     04EE                     u642:
  1804     04EE  0877               	movf	___lmul@multiplicand+3,w
  1805     04EF  1103               	clrz
  1806     04F0  1803               	skipnc
  1807     04F1  3E01               	addlw	1
  1808     04F2  1903               	skipnz
  1809     04F3  2CF5               	goto	u643
  1810     04F4  07FC               	addwf	___lmul@product+3,f
  1811     04F5                     u643:
  1812     04F5                     l1007:
  1813     04F5  3001               	movlw	1
  1814     04F6  00F8               	movwf	??___lmul
  1815     04F7                     u655:
  1816     04F7  1003               	clrc
  1817     04F8  0DF4               	rlf	___lmul@multiplicand,f
  1818     04F9  0DF5               	rlf	___lmul@multiplicand+1,f
  1819     04FA  0DF6               	rlf	___lmul@multiplicand+2,f
  1820     04FB  0DF7               	rlf	___lmul@multiplicand+3,f
  1821     04FC  0BF8               	decfsz	??___lmul,f
  1822     04FD  2CF7               	goto	u655
  1823     04FE                     l1009:
  1824     04FE  3001               	movlw	1
  1825     04FF                     u665:
  1826     04FF  1003               	clrc
  1827     0500  0CF3               	rrf	___lmul@multiplier+3,f
  1828     0501  0CF2               	rrf	___lmul@multiplier+2,f
  1829     0502  0CF1               	rrf	___lmul@multiplier+1,f
  1830     0503  0CF0               	rrf	___lmul@multiplier,f
  1831     0504  3EFF               	addlw	-1
  1832     0505  1D03               	skipz
  1833     0506  2CFF               	goto	u665
  1834     0507  0873               	movf	___lmul@multiplier+3,w
  1835     0508  0472               	iorwf	___lmul@multiplier+2,w
  1836     0509  0471               	iorwf	___lmul@multiplier+1,w
  1837     050A  0470               	iorwf	___lmul@multiplier,w
  1838     050B  1D03               	skipz
  1839     050C  2D0E               	goto	u671
  1840     050D  2D0F               	goto	u670
  1841     050E                     u671:
  1842     050E  2CDA               	goto	l1003
  1843     050F                     u670:
  1844     050F                     l1011:
  1845     050F  087C               	movf	___lmul@product+3,w
  1846     0510  00F3               	movwf	?___lmul+3
  1847     0511  087B               	movf	___lmul@product+2,w
  1848     0512  00F2               	movwf	?___lmul+2
  1849     0513  087A               	movf	___lmul@product+1,w
  1850     0514  00F1               	movwf	?___lmul+1
  1851     0515  0879               	movf	___lmul@product,w
  1852     0516  00F0               	movwf	?___lmul
  1853     0517                     l191:
  1854     0517  0008               	return
  1855     0518                     __end_of___lmul:
  1856                           
  1857                           	psect	text9
  1858     055F                     __ptext9:	
  1859 ;; *************** function ___lldiv *****************
  1860 ;; Defined at:
  1861 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\__lldiv.c"
  1862 ;; Parameters:    Size  Location     Type
  1863 ;;  divisor         4    0[BANK0 ] unsigned long 
  1864 ;;  dividend        4    4[BANK0 ] unsigned long 
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;  quotient        4    8[BANK0 ] unsigned long 
  1867 ;;  counter         1   12[BANK0 ] unsigned char 
  1868 ;; Return value:  Size  Location     Type
  1869 ;;                  4    0[BANK0 ] unsigned long 
  1870 ;; Registers used:
  1871 ;;		wreg, status,2, status,0, btemp+1
  1872 ;; Tracked objects:
  1873 ;;		On entry : 0/0
  1874 ;;		On exit  : 0/0
  1875 ;;		Unchanged: 0/0
  1876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1877 ;;      Params:         0       8       0       0       0
  1878 ;;      Locals:         0       5       0       0       0
  1879 ;;      Temps:          1       0       0       0       0
  1880 ;;      Totals:         1      13       0       0       0
  1881 ;;Total ram usage:       14 bytes
  1882 ;; Hardware stack levels used: 1
  1883 ;; This function calls:
  1884 ;;		Nothing
  1885 ;; This function is called by:
  1886 ;;		_main
  1887 ;; This function uses a non-reentrant model
  1888 ;;
  1889                           
  1890     055F                     ___lldiv:	
  1891                           ;psect for function ___lldiv
  1892                           
  1893     055F                     l1015:	
  1894                           ;incstack = 0
  1895                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+1]
  1896                           
  1897     055F  3000               	movlw	0
  1898     0560  1283               	bcf	3,5	;RP0=0, select bank0
  1899     0561  1303               	bcf	3,6	;RP1=0, select bank0
  1900     0562  00C1               	movwf	___lldiv@quotient+3
  1901     0563  3000               	movlw	0
  1902     0564  00C0               	movwf	___lldiv@quotient+2
  1903     0565  3000               	movlw	0
  1904     0566  00BF               	movwf	___lldiv@quotient+1
  1905     0567  3000               	movlw	0
  1906     0568  00BE               	movwf	___lldiv@quotient
  1907     0569  0839               	movf	___lldiv@divisor+3,w
  1908     056A  0438               	iorwf	___lldiv@divisor+2,w
  1909     056B  0437               	iorwf	___lldiv@divisor+1,w
  1910     056C  0436               	iorwf	___lldiv@divisor,w
  1911     056D  1903               	skipnz
  1912     056E  2D70               	goto	u681
  1913     056F  2D71               	goto	u680
  1914     0570                     u681:
  1915     0570  2DBE               	goto	l1037
  1916     0571                     u680:
  1917     0571                     l1017:
  1918     0571  01C2               	clrf	___lldiv@counter
  1919     0572  0AC2               	incf	___lldiv@counter,f
  1920     0573  2D81               	goto	l1023
  1921     0574                     l1019:
  1922     0574  3001               	movlw	1
  1923     0575  00FD               	movwf	??___lldiv
  1924     0576                     u695:
  1925     0576  1003               	clrc
  1926     0577  0DB6               	rlf	___lldiv@divisor,f
  1927     0578  0DB7               	rlf	___lldiv@divisor+1,f
  1928     0579  0DB8               	rlf	___lldiv@divisor+2,f
  1929     057A  0DB9               	rlf	___lldiv@divisor+3,f
  1930     057B  0BFD               	decfsz	??___lldiv,f
  1931     057C  2D76               	goto	u695
  1932     057D                     l1021:
  1933     057D  3001               	movlw	1
  1934     057E  00FF               	movwf	btemp+1
  1935     057F  087F               	movf	btemp+1,w
  1936     0580  07C2               	addwf	___lldiv@counter,f
  1937     0581                     l1023:
  1938     0581  1FB9               	btfss	___lldiv@divisor+3,7
  1939     0582  2D84               	goto	u701
  1940     0583  2D85               	goto	u700
  1941     0584                     u701:
  1942     0584  2D74               	goto	l1019
  1943     0585                     u700:
  1944     0585                     l1025:
  1945     0585  3001               	movlw	1
  1946     0586  00FD               	movwf	??___lldiv
  1947     0587                     u715:
  1948     0587  1003               	clrc
  1949     0588  0DBE               	rlf	___lldiv@quotient,f
  1950     0589  0DBF               	rlf	___lldiv@quotient+1,f
  1951     058A  0DC0               	rlf	___lldiv@quotient+2,f
  1952     058B  0DC1               	rlf	___lldiv@quotient+3,f
  1953     058C  0BFD               	decfsz	??___lldiv,f
  1954     058D  2D87               	goto	u715
  1955     058E                     l1027:
  1956     058E  0839               	movf	___lldiv@divisor+3,w
  1957     058F  023D               	subwf	___lldiv@dividend+3,w
  1958     0590  1D03               	skipz
  1959     0591  2D9C               	goto	u725
  1960     0592  0838               	movf	___lldiv@divisor+2,w
  1961     0593  023C               	subwf	___lldiv@dividend+2,w
  1962     0594  1D03               	skipz
  1963     0595  2D9C               	goto	u725
  1964     0596  0837               	movf	___lldiv@divisor+1,w
  1965     0597  023B               	subwf	___lldiv@dividend+1,w
  1966     0598  1D03               	skipz
  1967     0599  2D9C               	goto	u725
  1968     059A  0836               	movf	___lldiv@divisor,w
  1969     059B  023A               	subwf	___lldiv@dividend,w
  1970     059C                     u725:
  1971     059C  1C03               	skipc
  1972     059D  2D9F               	goto	u721
  1973     059E  2DA0               	goto	u720
  1974     059F                     u721:
  1975     059F  2DAF               	goto	l1033
  1976     05A0                     u720:
  1977     05A0                     l1029:
  1978     05A0  0836               	movf	___lldiv@divisor,w
  1979     05A1  02BA               	subwf	___lldiv@dividend,f
  1980     05A2  0837               	movf	___lldiv@divisor+1,w
  1981     05A3  1C03               	skipc
  1982     05A4  0F37               	incfsz	___lldiv@divisor+1,w
  1983     05A5  02BB               	subwf	___lldiv@dividend+1,f
  1984     05A6  0838               	movf	___lldiv@divisor+2,w
  1985     05A7  1C03               	skipc
  1986     05A8  0F38               	incfsz	___lldiv@divisor+2,w
  1987     05A9  02BC               	subwf	___lldiv@dividend+2,f
  1988     05AA  0839               	movf	___lldiv@divisor+3,w
  1989     05AB  1C03               	skipc
  1990     05AC  0F39               	incfsz	___lldiv@divisor+3,w
  1991     05AD  02BD               	subwf	___lldiv@dividend+3,f
  1992     05AE                     l1031:
  1993     05AE  143E               	bsf	___lldiv@quotient,0
  1994     05AF                     l1033:
  1995     05AF  3001               	movlw	1
  1996     05B0                     u735:
  1997     05B0  1003               	clrc
  1998     05B1  0CB9               	rrf	___lldiv@divisor+3,f
  1999     05B2  0CB8               	rrf	___lldiv@divisor+2,f
  2000     05B3  0CB7               	rrf	___lldiv@divisor+1,f
  2001     05B4  0CB6               	rrf	___lldiv@divisor,f
  2002     05B5  3EFF               	addlw	-1
  2003     05B6  1D03               	skipz
  2004     05B7  2DB0               	goto	u735
  2005     05B8                     l1035:
  2006     05B8  3001               	movlw	1
  2007     05B9  02C2               	subwf	___lldiv@counter,f
  2008     05BA  1D03               	btfss	3,2
  2009     05BB  2DBD               	goto	u741
  2010     05BC  2DBE               	goto	u740
  2011     05BD                     u741:
  2012     05BD  2D85               	goto	l1025
  2013     05BE                     u740:
  2014     05BE                     l1037:
  2015     05BE  0841               	movf	___lldiv@quotient+3,w
  2016     05BF  00B9               	movwf	?___lldiv+3
  2017     05C0  0840               	movf	___lldiv@quotient+2,w
  2018     05C1  00B8               	movwf	?___lldiv+2
  2019     05C2  083F               	movf	___lldiv@quotient+1,w
  2020     05C3  00B7               	movwf	?___lldiv+1
  2021     05C4  083E               	movf	___lldiv@quotient,w
  2022     05C5  00B6               	movwf	?___lldiv
  2023     05C6                     l213:
  2024     05C6  0008               	return
  2025     05C7                     __end_of___lldiv:
  2026     007E                     btemp	set	126	;btemp
  2027     007E                     wtemp0	set	126
  2028                           
  2029                           	psect	config
  2030                           
  2031                           ;Config register CONFIG @ 0x2007
  2032                           ;	Oscillator Selection bits
  2033                           ;	FOSC = EXTRC, RC oscillator
  2034                           ;	Watchdog Timer Enable bit
  2035                           ;	WDTE = OFF, WDT disabled
  2036                           ;	Power-up Timer Enable bit
  2037                           ;	PWRTE = OFF, PWRT disabled
  2038                           ;	Brown-out Reset Enable bit
  2039                           ;	BOREN = OFF, BOR disabled
  2040                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2041                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2042                           ;	Data EEPROM Memory Code Protection bit
  2043                           ;	CPD = OFF, Data EEPROM code protection off
  2044                           ;	Flash Program Memory Write Enable bits
  2045                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2046                           ;	In-Circuit Debugger Mode bit
  2047                           ;	DEBUG = 0x1, unprogrammed default
  2048                           ;	Flash Program Memory Code Protection bit
  2049                           ;	CP = OFF, Code protection off
  2050     2007                     	org	8199
  2051     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        18
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     22      62
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___lldiv
    _lcd_output->___lwdiv
    ___lwdiv->___wmul
    _lcd_init->_lcd_command
    ___lldiv->___lmul

Critical Paths under _main in BANK0

    _main->___lldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    2531
                                             13 BANK0      9     9      0
                            ___lldiv
                             ___lmul
                        _lcd_command
                           _lcd_data
                           _lcd_init
                         _lcd_output
 ---------------------------------------------------------------------------------
 (1) _lcd_output                                          10     8      2    1771
                                              0 BANK0     10     8      2
                             ___bmul
                            ___lwdiv
                             ___wmul
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     548
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              6 COMMON     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     320
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0      22
                                              3 COMMON     2     2      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              13     5      8     244
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             14     6      8     314
                                             13 COMMON     1     1      0
                                              0 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lldiv
     ___lmul (ARG)
   ___lmul
   _lcd_command
   _lcd_data
   _lcd_init
     _lcd_command
   _lcd_output
     ___bmul
     ___lwdiv
       ___wmul (ARG)
     ___wmul
     _lcd_data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     16      3E       5       77.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4C      12        0.0%
ABS                  0      0      4C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Fri Aug 30 16:26:07 2024

                      _m 0034                        pc 0002           ___bmul@product 0071  
                     l60 061B                       l71 0468                       l74 043C  
                     l91 07E5                       l68 055E                       _d1 002A  
                     _d2 0028                       _d3 002E                       _d4 002C  
                     fsr 0004      ___wmul@multiplicand 0072                      l203 0451  
                    l213 05C6                      l191 0517                      l177 0475  
                    l179 048D                      l457 04D1                      l901 0447  
                    l903 0449                      l911 048E                      l905 044B  
                    l921 04A4                      l913 0490                      l907 0450  
                    l931 04C7                      l923 04A8                      l915 0496  
                    l941 051D                      l925 04B9                      l917 0499  
                    l933 04CD                      l863 0453                      l951 0550  
                    l943 0526                      l927 04BF                      l919 04A0  
                    l871 042A                      l865 0459                      l953 0556  
                    l945 052C                      l937 0518                      l929 04C0  
                    l881 0469                      l873 042D                      l961 06FE  
                    l867 045B                      l947 053A                      l939 051C  
                    l891 0489                      l883 046B                      l875 042F  
                    l971 077F                      l963 0742                      l955 06B9  
                    l869 045C                      l949 0542                      l885 046F  
                    l877 0430                      l981 07A3                      l973 0787  
                    l965 076B                      l957 06BF                      l895 043E  
                    l887 047C                      l879 0434                      l991 07C5  
                    l983 07A9                      l975 078D                      l967 0771  
                    l959 06D5                      l897 043F                      l889 0483  
                    l993 07CB                      l985 07AF                      l977 0795  
                    l969 0779                      l899 0443                      l995 07D1  
                    l987 07B7                      l979 079B                      l997 07D7  
                    l989 07BD                      l999 07DF                      u400 046F  
                    u401 046E                      u500 04B9                      u501 04B8  
                    u430 0489                      u431 0488                      u415 0476  
                    u440 0443                      u520 04CD                      u600 07CB  
                    u441 0442                      u521 04CC                      u505 04B5  
                    u425 047D                      u601 07CA                      u450 0450  
                    u610 07D1                      u530 0771                      u451 044F  
                    u515 04C1                      u611 07D0                      u531 0770  
                    u700 0585                      u460 0496                      u620 07D7  
                    u540 0787                      u701 0584                      u461 0495  
                    u621 07D6                      u541 0786                      u630 04DE  
                    u550 078D                      u631 04DD                      u551 078C  
                    u720 05A0                      u480 04A8                      u560 07A3  
                    u721 059F                      u641 04E7                      u481 04A7  
                    u561 07A2                      u642 04EE                      u570 07A9  
                    u715 0587                      u643 04F5                      u475 049A  
                    u571 07A8                      u740 05BE                      u580 07AF  
                    u741 05BD                      u725 059C                      u581 07AE  
                    u670 050F                      u590 07C5                      u750 05EB  
                    u735 05B0                      u671 050E                      u655 04F7  
                    u495 04A9                      u807 0438                      u591 07C4  
                    u751 05EA                      u680 0571                      u760 060A  
                    u681 0570                      u665 04FF                      u817 0530  
                    u761 0609                      u770 061F                      u827 053E  
                    u771 061E                      u780 0643                      u837 054C  
                    u695 0576                      u847 055A                      u857 0464  
                    u785 063E                      u797 06B0                      fsr0 0004  
                    indf 0000             lcd_command@i 0072                     l1001 04D2  
                   l1011 050F                     l1003 04DA                     l1021 057D  
                   l1005 04DE                     l1031 05AE                     l1023 0581  
                   l1015 055F                     l1007 04F5                     l1033 05AF  
                   l1025 0585                     l1017 0571                     l1009 04FE  
                   l1041 05C7                     l1035 05B8                     l1027 058E  
                   l1019 0574                     l1051 05DF                     l1043 05D2  
                   l1029 05A0                     l1037 05BE                     l1053 05E5  
                   l1071 0616                     l1063 05F4                     l1055 05EB  
                   l1081 0688                     l1073 061A                     l1065 05FE  
                   l1057 05F1                     l1049 05D5                     l1083 068E  
                   l1075 061F                     l1067 0604                     l1085 0699  
                   l1077 0631                     l1069 060A                     l1087 069F  
                   l1079 0652                     l1089 06AA                     _main 05C7  
                   btemp 007E                     _volt 0020              lcd_output@i 0036  
            lcd_output@m 003E                     start 0000        ___bmul@multiplier 0072  
                  ?_main 0070          __end_of___lldiv 05C7          __end_of___lwdiv 04D2  
                  _PORTC 0007                    _PORTD 0008                    _TRISA 0085  
                  _TRISC 0087                    _TRISD 0088      ___lmul@multiplicand 0074  
                  _msg_1 0055                    _msg_2 004C                    main@i 004B  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 07E6             __end_of_main 06B9                   ??_main 0043  
                 _ADCON0 001F                   _ADCON1 009F                   _ADRESH 001E  
                 _ADRESL 009E         __end_of_lcd_data 043D         __end_of_lcd_init 055F  
                 ___bmul 043D                   ___lmul 04D2                   ___wmul 0469  
              ??___lldiv 007D                ??___lwdiv 007A                   _result 0024  
__end_of__initialization 07FC      ___bmul@multiplicand 0070           __pcstackCOMMON 0070  
           __pidataBANK0 0404               __pbssBANK0 0020               __pmaintext 05C7  
                ?___bmul 0070                  ?___lmul 0070                  ?___wmul 0070  
         ___lmul@product 0079               _lcd_output 06B9                ?_lcd_data 0070  
              ?_lcd_init 0070                  ___lldiv 055F                  _adc_low 0032  
                ___lwdiv 048E                  __ptext1 06B9                  __ptext2 0429  
                __ptext3 0469                  __ptext4 048E                  __ptext5 043D  
                __ptext6 0518                  __ptext7 0452                  __ptext8 04D2  
                __ptext9 055F               ??_lcd_data 0070                  clrloop0 03FD  
             ??_lcd_init 0073     end_of_initialization 07FC          ___lldiv@divisor 0036  
        ___lldiv@counter 0042              ?_lcd_output 0036            ??_lcd_command 0070  
         __end_of___bmul 0452           __end_of___lmul 0518           __end_of___wmul 048E  
    start_initialization 07E6                 ??___bmul 0071                 ??___lmul 0078  
               ??___wmul 0074               init_fetch0 0416      __end_of_lcd_command 0469  
            __pdataBANK0 004C                ___latbits 0002            __pcstackBANK0 0036  
       ___lwdiv@dividend 0078                 ?___lldiv 0036                 ?___lwdiv 0076  
       ___lwdiv@quotient 007A           ___wmul@product 0074                clear_ram0 03FC  
            _lcd_command 0452                lcd_data@i 0072        ___wmul@multiplier 0070  
           ??_lcd_output 0038        ___lmul@multiplier 0070       __end_of_lcd_output 07E6  
               _adc_high 0030          ___lwdiv@divisor 0076          ___lwdiv@counter 007C  
               _lcd_data 0429                 _lcd_init 0518                 init_ram0 041A  
       ___lldiv@dividend 003A         ___lldiv@quotient 003E             ?_lcd_command 0070  
