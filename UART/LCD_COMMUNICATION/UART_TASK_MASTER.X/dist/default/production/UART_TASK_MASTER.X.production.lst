

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Thu Oct 03 20:55:07 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	dabs	1,0x7E,2
    11     0000                     
    12                           ; Generated 12/10/2023 GMT
    13                           ; 
    14                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    15                           ; All rights reserved.
    16                           ; 
    17                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    18                           ; 
    19                           ; Redistribution and use in source and binary forms, with or without modification, are
    20                           ; permitted provided that the following conditions are met:
    21                           ; 
    22                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    23                           ;        conditions and the following disclaimer.
    24                           ; 
    25                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    26                           ;        of conditions and the following disclaimer in the documentation and/or other
    27                           ;        materials provided with the distribution. Publication is not required when
    28                           ;        this file is used in an embedded application.
    29                           ; 
    30                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    31                           ;        software without specific prior written permission.
    32                           ; 
    33                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    34                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    35                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    36                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    37                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    38                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    39                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    40                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    41                           ; 
    42                           ; 
    43                           ; Code-generator required, PIC16F877A Definitions
    44                           ; 
    45                           ; SFR Addresses
    46     0000                     	;# 
    47     0001                     	;# 
    48     0002                     	;# 
    49     0003                     	;# 
    50     0004                     	;# 
    51     0005                     	;# 
    52     0006                     	;# 
    53     0007                     	;# 
    54     0008                     	;# 
    55     0009                     	;# 
    56     000A                     	;# 
    57     000B                     	;# 
    58     000C                     	;# 
    59     000D                     	;# 
    60     000E                     	;# 
    61     000E                     	;# 
    62     000F                     	;# 
    63     0010                     	;# 
    64     0011                     	;# 
    65     0012                     	;# 
    66     0013                     	;# 
    67     0014                     	;# 
    68     0015                     	;# 
    69     0015                     	;# 
    70     0016                     	;# 
    71     0017                     	;# 
    72     0018                     	;# 
    73     0019                     	;# 
    74     001A                     	;# 
    75     001B                     	;# 
    76     001B                     	;# 
    77     001C                     	;# 
    78     001D                     	;# 
    79     001E                     	;# 
    80     001F                     	;# 
    81     0081                     	;# 
    82     0085                     	;# 
    83     0086                     	;# 
    84     0087                     	;# 
    85     0088                     	;# 
    86     0089                     	;# 
    87     008C                     	;# 
    88     008D                     	;# 
    89     008E                     	;# 
    90     0091                     	;# 
    91     0092                     	;# 
    92     0093                     	;# 
    93     0094                     	;# 
    94     0098                     	;# 
    95     0099                     	;# 
    96     009C                     	;# 
    97     009D                     	;# 
    98     009E                     	;# 
    99     009F                     	;# 
   100     010C                     	;# 
   101     010D                     	;# 
   102     010E                     	;# 
   103     010F                     	;# 
   104     018C                     	;# 
   105     018D                     	;# 
   106     0000                     	;# 
   107     0001                     	;# 
   108     0002                     	;# 
   109     0003                     	;# 
   110     0004                     	;# 
   111     0005                     	;# 
   112     0006                     	;# 
   113     0007                     	;# 
   114     0008                     	;# 
   115     0009                     	;# 
   116     000A                     	;# 
   117     000B                     	;# 
   118     000C                     	;# 
   119     000D                     	;# 
   120     000E                     	;# 
   121     000E                     	;# 
   122     000F                     	;# 
   123     0010                     	;# 
   124     0011                     	;# 
   125     0012                     	;# 
   126     0013                     	;# 
   127     0014                     	;# 
   128     0015                     	;# 
   129     0015                     	;# 
   130     0016                     	;# 
   131     0017                     	;# 
   132     0018                     	;# 
   133     0019                     	;# 
   134     001A                     	;# 
   135     001B                     	;# 
   136     001B                     	;# 
   137     001C                     	;# 
   138     001D                     	;# 
   139     001E                     	;# 
   140     001F                     	;# 
   141     0081                     	;# 
   142     0085                     	;# 
   143     0086                     	;# 
   144     0087                     	;# 
   145     0088                     	;# 
   146     0089                     	;# 
   147     008C                     	;# 
   148     008D                     	;# 
   149     008E                     	;# 
   150     0091                     	;# 
   151     0092                     	;# 
   152     0093                     	;# 
   153     0094                     	;# 
   154     0098                     	;# 
   155     0099                     	;# 
   156     009C                     	;# 
   157     009D                     	;# 
   158     009E                     	;# 
   159     009F                     	;# 
   160     010C                     	;# 
   161     010D                     	;# 
   162     010E                     	;# 
   163     010F                     	;# 
   164     018C                     	;# 
   165     018D                     	;# 
   166                           
   167                           	psect	nvCOMMON
   168     0073                     __pnvCOMMON:
   169     0073                     _value:
   170     0073                     	ds	1
   171     0018                     _RCSTA	set	24
   172     0008                     _PORTD	set	8
   173     001A                     _RCREG	set	26
   174     000C                     _PIR1	set	12
   175     0019                     _TXREG	set	25
   176     0006                     _PORTB	set	6
   177     0099                     _SPBRG	set	153
   178     0098                     _TXSTA	set	152
   179     0086                     _TRISB	set	134
   180     0088                     _TRISD	set	136
   181     0087                     _TRISC	set	135
   182     0081                     _OPTION_REG	set	129
   183                           
   184                           	psect	cinit
   185     07FB                     start_initialization:	
   186                           ; #config settings
   187                           
   188     07FB                     __initialization:
   189                           
   190                           ; Clear objects allocated to COMMON
   191     07FB  01F4               	clrf	__pbssCOMMON& (0+127)
   192     07FC                     end_of_initialization:	
   193                           ;End of C runtime variable initialization code
   194                           
   195     07FC                     __end_of__initialization:
   196     07FC  0183               	clrf	3
   197     07FD  120A  118A  2F82   	ljmp	_main	;jump to C main() function
   198                           
   199                           	psect	bssCOMMON
   200     0074                     __pbssCOMMON:
   201     0074                     _value1:
   202     0074                     	ds	1
   203                           
   204                           	psect	cstackCOMMON
   205     0070                     __pcstackCOMMON:
   206     0070                     ?_transmit_init:
   207     0070                     ??_transmit_init:	
   208                           ; 1 bytes @ 0x0
   209                           
   210     0070                     ?_main:	
   211                           ; 1 bytes @ 0x0
   212                           
   213     0070                     ??_main:	
   214                           ; 1 bytes @ 0x0
   215                           
   216                           
   217                           ; 1 bytes @ 0x0
   218     0070                     	ds	3
   219                           
   220                           	psect	maintext
   221     0782                     __pmaintext:	
   222 ;;
   223 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   224 ;;
   225 ;; *************** function _main *****************
   226 ;; Defined at:
   227 ;;		line 7 in file "MASTER.c"
   228 ;; Parameters:    Size  Location     Type
   229 ;;		None
   230 ;; Auto vars:     Size  Location     Type
   231 ;;		None
   232 ;; Return value:  Size  Location     Type
   233 ;;                  1    wreg      void 
   234 ;; Registers used:
   235 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   236 ;; Tracked objects:
   237 ;;		On entry : B00/0
   238 ;;		On exit  : 0/0
   239 ;;		Unchanged: 0/0
   240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   241 ;;      Params:         0       0       0       0       0
   242 ;;      Locals:         0       0       0       0       0
   243 ;;      Temps:          3       0       0       0       0
   244 ;;      Totals:         3       0       0       0       0
   245 ;;Total ram usage:        3 bytes
   246 ;; Hardware stack levels required when called: 1
   247 ;; This function calls:
   248 ;;		_transmit_init
   249 ;; This function is called by:
   250 ;;		Startup code after reset
   251 ;; This function uses a non-reentrant model
   252 ;;
   253                           
   254     0782                     _main:	
   255                           ;psect for function _main
   256                           
   257     0782                     l619:	
   258                           ;incstack = 0
   259                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   260                           
   261                           
   262                           ;MASTER.c: 8:     transmit_init();
   263     0782  120A  118A  2762  120A  118A  	fcall	_transmit_init
   264     0787                     l621:
   265                           
   266                           ;MASTER.c: 10:         value = PORTB;
   267     0787  1283               	bcf	3,5	;RP0=0, select bank0
   268     0788  1303               	bcf	3,6	;RP1=0, select bank0
   269     0789  0806               	movf	6,w	;volatile
   270     078A  00F3               	movwf	_value
   271                           
   272                           ;MASTER.c: 11:         switch (value) {
   273     078B  2FC8               	goto	l633
   274     078C                     l623:
   275                           
   276                           ;MASTER.c: 13:                 TXREG = 'A';
   277     078C  3041               	movlw	65
   278     078D  0099               	movwf	25	;volatile
   279                           
   280                           ;MASTER.c: 14:                 _delay((unsigned long)((200)*(6000000/4000.0)));
   281     078E  3002               	movlw	2
   282     078F  00F2               	movwf	??_main+2
   283     0790  3086               	movlw	134
   284     0791  00F1               	movwf	??_main+1
   285     0792  3099               	movlw	153
   286     0793  00F0               	movwf	??_main
   287     0794                     u27:
   288     0794  0BF0               	decfsz	??_main,f
   289     0795  2F94               	goto	u27
   290     0796  0BF1               	decfsz	??_main+1,f
   291     0797  2F94               	goto	u27
   292     0798  0BF2               	decfsz	??_main+2,f
   293     0799  2F94               	goto	u27
   294                           
   295                           ;MASTER.c: 15:                 break;
   296     079A  2FD6               	goto	l40
   297     079B                     l625:
   298                           
   299                           ;MASTER.c: 17:                 TXREG = 'B';
   300     079B  3042               	movlw	66
   301     079C  0099               	movwf	25	;volatile
   302                           
   303                           ;MASTER.c: 18:                 _delay((unsigned long)((200)*(6000000/4000.0)));
   304     079D  3002               	movlw	2
   305     079E  00F2               	movwf	??_main+2
   306     079F  3086               	movlw	134
   307     07A0  00F1               	movwf	??_main+1
   308     07A1  3099               	movlw	153
   309     07A2  00F0               	movwf	??_main
   310     07A3                     u37:
   311     07A3  0BF0               	decfsz	??_main,f
   312     07A4  2FA3               	goto	u37
   313     07A5  0BF1               	decfsz	??_main+1,f
   314     07A6  2FA3               	goto	u37
   315     07A7  0BF2               	decfsz	??_main+2,f
   316     07A8  2FA3               	goto	u37
   317                           
   318                           ;MASTER.c: 19:                 break;
   319     07A9  2FD6               	goto	l40
   320     07AA                     l627:
   321                           
   322                           ;MASTER.c: 21:                 TXREG = 'C';
   323     07AA  3043               	movlw	67
   324     07AB  0099               	movwf	25	;volatile
   325                           
   326                           ;MASTER.c: 22:                 _delay((unsigned long)((200)*(6000000/4000.0)));
   327     07AC  3002               	movlw	2
   328     07AD  00F2               	movwf	??_main+2
   329     07AE  3086               	movlw	134
   330     07AF  00F1               	movwf	??_main+1
   331     07B0  3099               	movlw	153
   332     07B1  00F0               	movwf	??_main
   333     07B2                     u47:
   334     07B2  0BF0               	decfsz	??_main,f
   335     07B3  2FB2               	goto	u47
   336     07B4  0BF1               	decfsz	??_main+1,f
   337     07B5  2FB2               	goto	u47
   338     07B6  0BF2               	decfsz	??_main+2,f
   339     07B7  2FB2               	goto	u47
   340                           
   341                           ;MASTER.c: 23:                 break;
   342     07B8  2FD6               	goto	l40
   343     07B9                     l629:
   344                           
   345                           ;MASTER.c: 25:                 TXREG = 'D';
   346     07B9  3044               	movlw	68
   347     07BA  0099               	movwf	25	;volatile
   348                           
   349                           ;MASTER.c: 26:                 _delay((unsigned long)((200)*(6000000/4000.0)));
   350     07BB  3002               	movlw	2
   351     07BC  00F2               	movwf	??_main+2
   352     07BD  3086               	movlw	134
   353     07BE  00F1               	movwf	??_main+1
   354     07BF  3099               	movlw	153
   355     07C0  00F0               	movwf	??_main
   356     07C1                     u57:
   357     07C1  0BF0               	decfsz	??_main,f
   358     07C2  2FC1               	goto	u57
   359     07C3  0BF1               	decfsz	??_main+1,f
   360     07C4  2FC1               	goto	u57
   361     07C5  0BF2               	decfsz	??_main+2,f
   362     07C6  2FC1               	goto	u57
   363                           
   364                           ;MASTER.c: 27:                 break;
   365     07C7  2FD6               	goto	l40
   366     07C8                     l633:
   367     07C8  0873               	movf	_value,w
   368                           
   369                           ; Switch size 1, requested type "simple"
   370                           ; Number of cases is 4, Range of values is 112 to 224
   371                           ; switch strategies available:
   372                           ; Name         Instructions Cycles
   373                           ; simple_byte           13     7 (average)
   374                           ; jumptable            263     9 (fixed)
   375                           ;	Chosen strategy is simple_byte
   376     07C9  3A70               	xorlw	112	; case 112
   377     07CA  1903               	skipnz
   378     07CB  2FB9               	goto	l629
   379     07CC  3AC0               	xorlw	192	; case 176
   380     07CD  1903               	skipnz
   381     07CE  2FAA               	goto	l627
   382     07CF  3A60               	xorlw	96	; case 208
   383     07D0  1903               	skipnz
   384     07D1  2F9B               	goto	l625
   385     07D2  3A30               	xorlw	48	; case 224
   386     07D3  1903               	skipnz
   387     07D4  2F8C               	goto	l623
   388     07D5  2FD6               	goto	l40
   389     07D6                     l40:
   390                           
   391                           ;MASTER.c: 31:         if (PIR1 & 0x20) {
   392     07D6  1283               	bcf	3,5	;RP0=0, select bank0
   393     07D7  1303               	bcf	3,6	;RP1=0, select bank0
   394     07D8  1E8C               	btfss	12,5	;volatile
   395     07D9  2FDB               	goto	u11
   396     07DA  2FDC               	goto	u10
   397     07DB                     u11:
   398     07DB  2F87               	goto	l621
   399     07DC                     u10:
   400     07DC                     l635:
   401                           
   402                           ;MASTER.c: 32:             value1 = RCREG;
   403     07DC  081A               	movf	26,w	;volatile
   404     07DD  00F4               	movwf	_value1
   405                           
   406                           ;MASTER.c: 33:             switch (value1) {
   407     07DE  2FEA               	goto	l649
   408     07DF                     l637:
   409                           
   410                           ;MASTER.c: 35:                     PORTD = 0x02;
   411     07DF  3002               	movlw	2
   412     07E0  0088               	movwf	8	;volatile
   413                           
   414                           ;MASTER.c: 36:                     break;
   415     07E1  2F87               	goto	l621
   416     07E2                     l639:
   417                           
   418                           ;MASTER.c: 38:                     PORTD = 0x01;
   419     07E2  3001               	movlw	1
   420     07E3  0088               	movwf	8	;volatile
   421                           
   422                           ;MASTER.c: 39:                     break;
   423     07E4  2F87               	goto	l621
   424     07E5                     l641:
   425                           
   426                           ;MASTER.c: 41:                     PORTD = 0x03;
   427     07E5  3003               	movlw	3
   428     07E6  0088               	movwf	8	;volatile
   429                           
   430                           ;MASTER.c: 42:                     break;
   431     07E7  2F87               	goto	l621
   432     07E8                     l643:
   433                           
   434                           ;MASTER.c: 44:                     PORTD = 0x00;
   435     07E8  0188               	clrf	8	;volatile
   436                           
   437                           ;MASTER.c: 45:                     break;
   438     07E9  2F87               	goto	l621
   439     07EA                     l649:
   440     07EA  0874               	movf	_value1,w
   441                           
   442                           ; Switch size 1, requested type "simple"
   443                           ; Number of cases is 4, Range of values is 97 to 100
   444                           ; switch strategies available:
   445                           ; Name         Instructions Cycles
   446                           ; simple_byte           13     7 (average)
   447                           ; direct_byte           23    11 (fixed)
   448                           ; jumptable            263     9 (fixed)
   449                           ;	Chosen strategy is simple_byte
   450     07EB  3A61               	xorlw	97	; case 97
   451     07EC  1903               	skipnz
   452     07ED  2FDF               	goto	l637
   453     07EE  3A03               	xorlw	3	; case 98
   454     07EF  1903               	skipnz
   455     07F0  2FE2               	goto	l639
   456     07F1  3A01               	xorlw	1	; case 99
   457     07F2  1903               	skipnz
   458     07F3  2FE5               	goto	l641
   459     07F4  3A07               	xorlw	7	; case 100
   460     07F5  1903               	skipnz
   461     07F6  2FE8               	goto	l643
   462     07F7  2FE8               	goto	l643
   463     07F8  120A  118A  2800   	ljmp	start
   464     07FB                     __end_of_main:
   465                           
   466                           	psect	text1
   467     0762                     __ptext1:	
   468 ;; *************** function _transmit_init *****************
   469 ;; Defined at:
   470 ;;		line 54 in file "MASTER.c"
   471 ;; Parameters:    Size  Location     Type
   472 ;;		None
   473 ;; Auto vars:     Size  Location     Type
   474 ;;		None
   475 ;; Return value:  Size  Location     Type
   476 ;;                  1    wreg      void 
   477 ;; Registers used:
   478 ;;		wreg, status,2, status,0, btemp+1
   479 ;; Tracked objects:
   480 ;;		On entry : 0/0
   481 ;;		On exit  : 0/0
   482 ;;		Unchanged: 0/0
   483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   484 ;;      Params:         0       0       0       0       0
   485 ;;      Locals:         0       0       0       0       0
   486 ;;      Temps:          0       0       0       0       0
   487 ;;      Totals:         0       0       0       0       0
   488 ;;Total ram usage:        0 bytes
   489 ;; Hardware stack levels used: 1
   490 ;; This function calls:
   491 ;;		Nothing
   492 ;; This function is called by:
   493 ;;		_main
   494 ;; This function uses a non-reentrant model
   495 ;;
   496                           
   497     0762                     _transmit_init:	
   498                           ;psect for function _transmit_init
   499                           
   500     0762                     l601:	
   501                           ;incstack = 0
   502                           ; Regs used in _transmit_init: [wreg+status,2+status,0+btemp+1]
   503                           
   504                           
   505                           ;MASTER.c: 55:     OPTION_REG &= 0x7F;
   506     0762  307F               	movlw	127
   507     0763  00FF               	movwf	btemp+1
   508     0764  087F               	movf	btemp+1,w
   509     0765  1683               	bsf	3,5	;RP0=1, select bank1
   510     0766  1303               	bcf	3,6	;RP1=0, select bank1
   511     0767  0581               	andwf	1,f	;volatile
   512     0768                     l603:
   513                           
   514                           ;MASTER.c: 56:     TRISC = 0xC0;
   515     0768  30C0               	movlw	192
   516     0769  0087               	movwf	7	;volatile
   517     076A                     l605:
   518                           
   519                           ;MASTER.c: 57:     TRISD = 0x00;
   520     076A  0188               	clrf	8	;volatile
   521     076B                     l607:
   522                           
   523                           ;MASTER.c: 58:     PORTD = 0x00;
   524     076B  1283               	bcf	3,5	;RP0=0, select bank0
   525     076C  1303               	bcf	3,6	;RP1=0, select bank0
   526     076D  0188               	clrf	8	;volatile
   527     076E                     l609:
   528                           
   529                           ;MASTER.c: 59:     TRISB = 0xF0;
   530     076E  30F0               	movlw	240
   531     076F  1683               	bsf	3,5	;RP0=1, select bank1
   532     0770  1303               	bcf	3,6	;RP1=0, select bank1
   533     0771  0086               	movwf	6	;volatile
   534     0772                     l611:
   535                           
   536                           ;MASTER.c: 60:     PORTB = 0x00;
   537     0772  1283               	bcf	3,5	;RP0=0, select bank0
   538     0773  1303               	bcf	3,6	;RP1=0, select bank0
   539     0774  0186               	clrf	6	;volatile
   540     0775                     l613:
   541                           
   542                           ;MASTER.c: 61:     TXSTA = 0x20;
   543     0775  3020               	movlw	32
   544     0776  1683               	bsf	3,5	;RP0=1, select bank1
   545     0777  1303               	bcf	3,6	;RP1=0, select bank1
   546     0778  0098               	movwf	24	;volatile
   547     0779                     l615:
   548                           
   549                           ;MASTER.c: 62:     RCSTA = 0x90;
   550     0779  3090               	movlw	144
   551     077A  1283               	bcf	3,5	;RP0=0, select bank0
   552     077B  1303               	bcf	3,6	;RP1=0, select bank0
   553     077C  0098               	movwf	24	;volatile
   554     077D                     l617:
   555                           
   556                           ;MASTER.c: 63:     SPBRG = 0x09;
   557     077D  3009               	movlw	9
   558     077E  1683               	bsf	3,5	;RP0=1, select bank1
   559     077F  1303               	bcf	3,6	;RP1=0, select bank1
   560     0780  0099               	movwf	25	;volatile
   561     0781                     l57:
   562     0781  0008               	return
   563     0782                     __end_of_transmit_init:
   564     007E                     btemp	set	126	;btemp
   565     007E                     wtemp0	set	126

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      3       5
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0       0
                                              0 COMMON     3     3      0
                      _transmit_init
 ---------------------------------------------------------------------------------
 (1) _transmit_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _transmit_init

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      3       5       1       35.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       5       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       5      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Thu Oct 03 20:55:07 2024

                     l40 07D6                       l57 0781                       u10 07DC  
                     u11 07DB                       u27 0794                       u37 07A3  
                     u47 07B2                       u57 07C1                      l601 0762  
                    l611 0772                      l603 0768                      l613 0775  
                    l605 076A                      l621 0787                      l615 0779  
                    l607 076B                      l623 078C                      l617 077D  
                    l609 076E                      l641 07E5                      l625 079B  
                    l633 07C8                      l643 07E8                      l635 07DC  
                    l627 07AA                      l619 0782                      l637 07DF  
                    l629 07B9                      l639 07E2                      l649 07EA  
                   _PIR1 000C                     _main 0782                     btemp 007E  
                   start 0000                    ?_main 0070                    _RCREG 001A  
                  _RCSTA 0018                    _SPBRG 0099                    _PORTB 0006  
                  _PORTD 0008                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088                    _TXREG 0019            _transmit_init 0762  
                  _TXSTA 0098                    _value 0073                    status 0003  
                  wtemp0 007E          __initialization 07FB             __end_of_main 07FB  
                 ??_main 0070           ?_transmit_init 0070                   _value1 0074  
__end_of__initialization 07FC           __pcstackCOMMON 0070          ??_transmit_init 0070  
             __pnvCOMMON 0073               __pmaintext 0782                  __ptext1 0762  
   end_of_initialization 07FC      start_initialization 07FB    __end_of_transmit_init 0782  
            __pbssCOMMON 0074                ___latbits 0002               _OPTION_REG 0081  
