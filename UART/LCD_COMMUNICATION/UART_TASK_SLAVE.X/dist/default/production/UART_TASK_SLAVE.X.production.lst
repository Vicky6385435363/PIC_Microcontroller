

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Thu Oct 03 20:55:15 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 12/10/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0006                     	;# 
    59     0007                     	;# 
    60     0008                     	;# 
    61     0009                     	;# 
    62     000A                     	;# 
    63     000B                     	;# 
    64     000C                     	;# 
    65     000D                     	;# 
    66     000E                     	;# 
    67     000E                     	;# 
    68     000F                     	;# 
    69     0010                     	;# 
    70     0011                     	;# 
    71     0012                     	;# 
    72     0013                     	;# 
    73     0014                     	;# 
    74     0015                     	;# 
    75     0015                     	;# 
    76     0016                     	;# 
    77     0017                     	;# 
    78     0018                     	;# 
    79     0019                     	;# 
    80     001A                     	;# 
    81     001B                     	;# 
    82     001B                     	;# 
    83     001C                     	;# 
    84     001D                     	;# 
    85     001E                     	;# 
    86     001F                     	;# 
    87     0081                     	;# 
    88     0085                     	;# 
    89     0086                     	;# 
    90     0087                     	;# 
    91     0088                     	;# 
    92     0089                     	;# 
    93     008C                     	;# 
    94     008D                     	;# 
    95     008E                     	;# 
    96     0091                     	;# 
    97     0092                     	;# 
    98     0093                     	;# 
    99     0094                     	;# 
   100     0098                     	;# 
   101     0099                     	;# 
   102     009C                     	;# 
   103     009D                     	;# 
   104     009E                     	;# 
   105     009F                     	;# 
   106     010C                     	;# 
   107     010D                     	;# 
   108     010E                     	;# 
   109     010F                     	;# 
   110     018C                     	;# 
   111     018D                     	;# 
   112     0000                     	;# 
   113     0001                     	;# 
   114     0002                     	;# 
   115     0003                     	;# 
   116     0004                     	;# 
   117     0005                     	;# 
   118     0006                     	;# 
   119     0007                     	;# 
   120     0008                     	;# 
   121     0009                     	;# 
   122     000A                     	;# 
   123     000B                     	;# 
   124     000C                     	;# 
   125     000D                     	;# 
   126     000E                     	;# 
   127     000E                     	;# 
   128     000F                     	;# 
   129     0010                     	;# 
   130     0011                     	;# 
   131     0012                     	;# 
   132     0013                     	;# 
   133     0014                     	;# 
   134     0015                     	;# 
   135     0015                     	;# 
   136     0016                     	;# 
   137     0017                     	;# 
   138     0018                     	;# 
   139     0019                     	;# 
   140     001A                     	;# 
   141     001B                     	;# 
   142     001B                     	;# 
   143     001C                     	;# 
   144     001D                     	;# 
   145     001E                     	;# 
   146     001F                     	;# 
   147     0081                     	;# 
   148     0085                     	;# 
   149     0086                     	;# 
   150     0087                     	;# 
   151     0088                     	;# 
   152     0089                     	;# 
   153     008C                     	;# 
   154     008D                     	;# 
   155     008E                     	;# 
   156     0091                     	;# 
   157     0092                     	;# 
   158     0093                     	;# 
   159     0094                     	;# 
   160     0098                     	;# 
   161     0099                     	;# 
   162     009C                     	;# 
   163     009D                     	;# 
   164     009E                     	;# 
   165     009F                     	;# 
   166     010C                     	;# 
   167     010D                     	;# 
   168     010E                     	;# 
   169     010F                     	;# 
   170     018C                     	;# 
   171     018D                     	;# 
   172                           
   173                           	psect	idataBANK0
   174     0665                     __pidataBANK0:
   175                           
   176                           ;initializer for _b
   177     0665  3454               	retlw	84
   178     0666  3452               	retlw	82
   179     0667  3441               	retlw	65
   180     0668  344E               	retlw	78
   181     0669  3453               	retlw	83
   182     066A  344D               	retlw	77
   183     066B  3449               	retlw	73
   184     066C  3454               	retlw	84
   185     066D  3420               	retlw	32
   186     066E  3444               	retlw	68
   187     066F  3441               	retlw	65
   188     0670  3454               	retlw	84
   189     0671  3441               	retlw	65
   190     0672  343A               	retlw	58
   191     0673  3400               	retlw	0
   192                           
   193                           ;initializer for _a
   194     0674  3452               	retlw	82
   195     0675  3445               	retlw	69
   196     0676  3443               	retlw	67
   197     0677  3445               	retlw	69
   198     0678  3449               	retlw	73
   199     0679  3456               	retlw	86
   200     067A  3445               	retlw	69
   201     067B  3444               	retlw	68
   202     067C  3420               	retlw	32
   203     067D  3444               	retlw	68
   204     067E  3441               	retlw	65
   205     067F  3454               	retlw	84
   206     0680  3441               	retlw	65
   207     0681  343A               	retlw	58
   208     0682  3400               	retlw	0
   209     0018                     _RCSTA	set	24
   210     0008                     _PORTD	set	8
   211     0006                     _PORTB	set	6
   212     0019                     _TXREG	set	25
   213     001A                     _RCREG	set	26
   214     000C                     _PIR1	set	12
   215     0099                     _SPBRG	set	153
   216     0098                     _TXSTA	set	152
   217     0088                     _TRISD	set	136
   218     0086                     _TRISB	set	134
   219     0087                     _TRISC	set	135
   220                           
   221                           	psect	cinit
   222     07EC                     start_initialization:	
   223                           ; #config settings
   224                           
   225     07EC                     __initialization:
   226                           
   227                           ; Initialize objects allocated to BANK0
   228     07EC  1383               	bcf	3,7	;select IRP bank0
   229     07ED  303E               	movlw	low (__pdataBANK0+30)
   230     07EE  00FD               	movwf	btemp+-1
   231     07EF  3006               	movlw	high __pidataBANK0
   232     07F0  00FE               	movwf	btemp
   233     07F1  3065               	movlw	low __pidataBANK0
   234     07F2  00FF               	movwf	btemp+1
   235     07F3  3020               	movlw	low __pdataBANK0
   236     07F4  0084               	movwf	4
   237     07F5  120A  118A  2610  120A  118A  	fcall	init_ram0
   238                           
   239                           ; Clear objects allocated to COMMON
   240     07FA  01F8               	clrf	__pbssCOMMON& (0+127)
   241     07FB  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   242     07FC                     end_of_initialization:	
   243                           ;End of C runtime variable initialization code
   244                           
   245     07FC                     __end_of__initialization:
   246     07FC  0183               	clrf	3
   247     07FD  120A  118A  2EE6   	ljmp	_main	;jump to C main() function
   248                           
   249                           	psect	bssCOMMON
   250     0078                     __pbssCOMMON:
   251     0078                     _i:
   252     0078                     	ds	1
   253     0079                     _receive_value:
   254     0079                     	ds	1
   255                           
   256                           	psect	dataBANK0
   257     0020                     __pdataBANK0:
   258     0020                     _b:
   259     0020                     	ds	15
   260     002F                     _a:
   261     002F                     	ds	15
   262                           
   263                           	psect	inittext
   264     060C                     init_fetch0:	
   265                           ;	Called with low address in FSR and high address in W
   266                           
   267     060C  087E               	movf	btemp,w
   268     060D  008A               	movwf	10
   269     060E  087F               	movf	btemp+1,w
   270     060F  0082               	movwf	2
   271     0610                     init_ram0:	
   272                           ;Called with:
   273                           ;	high address of idata address in btemp 
   274                           ;	low address of idata address in btemp+1 
   275                           ;	low address of data in FSR
   276                           ;	high address + 1 of data in btemp-1
   277                           
   278     0610  120A  118A  260C  120A  118A  	fcall	init_fetch0
   279     0615  0080               	movwf	0
   280     0616  0A84               	incf	4,f
   281     0617  0804               	movf	4,w
   282     0618  067D               	xorwf	btemp+-1,w
   283     0619  1903               	btfsc	3,2
   284     061A  3400               	retlw	0
   285     061B  0AFF               	incf	btemp+1,f
   286     061C  1903               	btfsc	3,2
   287     061D  0AFE               	incf	btemp,f
   288     061E  2E10               	goto	init_ram0
   289                           
   290                           	psect	cstackCOMMON
   291     0070                     __pcstackCOMMON:
   292     0070                     ?_receive_init:
   293     0070                     ??_receive_init:	
   294                           ; 1 bytes @ 0x0
   295                           
   296     0070                     ?_lcd_init:	
   297                           ; 1 bytes @ 0x0
   298                           
   299     0070                     ?_lcd_command:	
   300                           ; 1 bytes @ 0x0
   301                           
   302     0070                     ??_lcd_command:	
   303                           ; 1 bytes @ 0x0
   304                           
   305     0070                     ?_lcd_data:	
   306                           ; 1 bytes @ 0x0
   307                           
   308     0070                     ??_lcd_data:	
   309                           ; 1 bytes @ 0x0
   310                           
   311     0070                     ?_main:	
   312                           ; 1 bytes @ 0x0
   313                           
   314                           
   315                           ; 1 bytes @ 0x0
   316     0070                     	ds	2
   317     0072                     lcd_command@i:
   318     0072                     lcd_data@i:	
   319                           ; 1 bytes @ 0x2
   320                           
   321                           
   322                           ; 1 bytes @ 0x2
   323     0072                     	ds	1
   324     0073                     ??_lcd_init:
   325                           
   326                           ; 1 bytes @ 0x3
   327     0073                     	ds	2
   328     0075                     ??_main:
   329                           
   330                           ; 1 bytes @ 0x5
   331     0075                     	ds	3
   332                           
   333                           	psect	maintext
   334     06E6                     __pmaintext:	
   335 ;;
   336 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   337 ;;
   338 ;; *************** function _main *****************
   339 ;; Defined at:
   340 ;;		line 21 in file "SLAVE.c"
   341 ;; Parameters:    Size  Location     Type
   342 ;;		None
   343 ;; Auto vars:     Size  Location     Type
   344 ;;		None
   345 ;; Return value:  Size  Location     Type
   346 ;;                  1    wreg      void 
   347 ;; Registers used:
   348 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   349 ;; Tracked objects:
   350 ;;		On entry : B00/0
   351 ;;		On exit  : 0/0
   352 ;;		Unchanged: 0/0
   353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   354 ;;      Params:         0       0       0       0       0
   355 ;;      Locals:         0       0       0       0       0
   356 ;;      Temps:          3       0       0       0       0
   357 ;;      Totals:         3       0       0       0       0
   358 ;;Total ram usage:        3 bytes
   359 ;; Hardware stack levels required when called: 2
   360 ;; This function calls:
   361 ;;		_lcd_command
   362 ;;		_lcd_data
   363 ;;		_lcd_init
   364 ;;		_receive_init
   365 ;; This function is called by:
   366 ;;		Startup code after reset
   367 ;; This function uses a non-reentrant model
   368 ;;
   369                           
   370     06E6                     _main:	
   371                           ;psect for function _main
   372                           
   373     06E6                     l663:	
   374                           ;incstack = 0
   375                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   376                           
   377                           
   378                           ;SLAVE.c: 22:     receive_init();
   379     06E6  120A  118A  264A  120A  118A  	fcall	_receive_init
   380     06EB                     l665:
   381                           
   382                           ;SLAVE.c: 23:     lcd_init();
   383     06EB  120A  118A  2683  120A  118A  	fcall	_lcd_init
   384     06F0                     l667:
   385                           
   386                           ;SLAVE.c: 24:     lcd_command(0x80);
   387     06F0  3080               	movlw	128
   388     06F1  120A  118A  2633  120A  118A  	fcall	_lcd_command
   389     06F6                     l669:
   390                           
   391                           ;SLAVE.c: 25:     for (i = 0; i < 14; i++) {
   392     06F6  01F8               	clrf	_i
   393     06F7                     l675:
   394                           
   395                           ;SLAVE.c: 26:         lcd_data(a[i]);
   396     06F7  0878               	movf	_i,w
   397     06F8  3E2F               	addlw	(low (_a| 0))& (0+255)
   398     06F9  0084               	movwf	4
   399     06FA  1383               	bcf	3,7	;select IRP bank0
   400     06FB  0800               	movf	0,w
   401     06FC  120A  118A  261F  120A  118A  	fcall	_lcd_data
   402     0701                     l677:
   403                           
   404                           ;SLAVE.c: 27:     }
   405     0701  3001               	movlw	1
   406     0702  00FF               	movwf	btemp+1
   407     0703  087F               	movf	btemp+1,w
   408     0704  07F8               	addwf	_i,f
   409     0705                     l679:
   410     0705  300E               	movlw	14
   411     0706  0278               	subwf	_i,w
   412     0707  1C03               	skipc
   413     0708  2F0A               	goto	u11
   414     0709  2F0B               	goto	u10
   415     070A                     u11:
   416     070A  2EF7               	goto	l675
   417     070B                     u10:
   418     070B                     l681:
   419                           
   420                           ;SLAVE.c: 28:     lcd_command(0xC0);
   421     070B  30C0               	movlw	192
   422     070C  120A  118A  2633  120A  118A  	fcall	_lcd_command
   423     0711                     l683:
   424                           
   425                           ;SLAVE.c: 29:     for (i = 0; i < 14; i++) {
   426     0711  01F8               	clrf	_i
   427     0712                     l689:
   428                           
   429                           ;SLAVE.c: 30:         lcd_data(b[i]);
   430     0712  0878               	movf	_i,w
   431     0713  3E20               	addlw	(low (_b| 0))& (0+255)
   432     0714  0084               	movwf	4
   433     0715  1383               	bcf	3,7	;select IRP bank0
   434     0716  0800               	movf	0,w
   435     0717  120A  118A  261F  120A  118A  	fcall	_lcd_data
   436     071C                     l691:
   437                           
   438                           ;SLAVE.c: 31:     }
   439     071C  3001               	movlw	1
   440     071D  00FF               	movwf	btemp+1
   441     071E  087F               	movf	btemp+1,w
   442     071F  07F8               	addwf	_i,f
   443     0720                     l693:
   444     0720  300E               	movlw	14
   445     0721  0278               	subwf	_i,w
   446     0722  1C03               	skipc
   447     0723  2F25               	goto	u21
   448     0724  2F26               	goto	u20
   449     0725                     u21:
   450     0725  2F12               	goto	l689
   451     0726                     u20:
   452     0726                     l49:	
   453                           ;SLAVE.c: 32:     while (1) {
   454                           
   455                           
   456                           ;SLAVE.c: 33:         if (PIR1 & 0x20) {
   457     0726  1283               	bcf	3,5	;RP0=0, select bank0
   458     0727  1303               	bcf	3,6	;RP1=0, select bank0
   459     0728  1E8C               	btfss	12,5	;volatile
   460     0729  2F2B               	goto	u31
   461     072A  2F2C               	goto	u30
   462     072B                     u31:
   463     072B  2F26               	goto	l49
   464     072C                     u30:
   465     072C                     l695:
   466                           
   467                           ;SLAVE.c: 34:             receive_value = RCREG;
   468     072C  081A               	movf	26,w	;volatile
   469     072D  00F9               	movwf	_receive_value
   470                           
   471                           ;SLAVE.c: 35:             switch (receive_value) {
   472     072E  2FDB               	goto	l739
   473     072F                     l697:
   474                           
   475                           ;SLAVE.c: 37:                     TXREG = 'a';
   476     072F  3061               	movlw	97
   477     0730  0099               	movwf	25	;volatile
   478     0731                     l699:
   479                           
   480                           ;SLAVE.c: 38:                     lcd_command(0x8E);
   481     0731  308E               	movlw	142
   482     0732  120A  118A  2633  120A  118A  	fcall	_lcd_command
   483     0737                     l701:
   484                           
   485                           ;SLAVE.c: 39:                     lcd_data(RCREG);
   486     0737  1283               	bcf	3,5	;RP0=0, select bank0
   487     0738  1303               	bcf	3,6	;RP1=0, select bank0
   488     0739  081A               	movf	26,w	;volatile
   489     073A  120A  118A  261F  120A  118A  	fcall	_lcd_data
   490     073F                     l703:
   491                           
   492                           ;SLAVE.c: 40:                     lcd_command(0xCE);
   493     073F  30CE               	movlw	206
   494     0740  120A  118A  2633  120A  118A  	fcall	_lcd_command
   495     0745                     l705:
   496                           
   497                           ;SLAVE.c: 41:                     lcd_data(TXREG);
   498     0745  1283               	bcf	3,5	;RP0=0, select bank0
   499     0746  1303               	bcf	3,6	;RP1=0, select bank0
   500     0747  0819               	movf	25,w	;volatile
   501     0748  120A  118A  261F  120A  118A  	fcall	_lcd_data
   502                           
   503                           ;SLAVE.c: 42:                     _delay((unsigned long)((200)*(6000000/4000.0)));
   504     074D  3002               	movlw	2
   505     074E  00F7               	movwf	??_main+2
   506     074F  3086               	movlw	134
   507     0750  00F6               	movwf	??_main+1
   508     0751  3099               	movlw	153
   509     0752  00F5               	movwf	??_main
   510     0753                     u47:
   511     0753  0BF5               	decfsz	??_main,f
   512     0754  2F53               	goto	u47
   513     0755  0BF6               	decfsz	??_main+1,f
   514     0756  2F53               	goto	u47
   515     0757  0BF7               	decfsz	??_main+2,f
   516     0758  2F53               	goto	u47
   517                           
   518                           ;SLAVE.c: 43:                     break;
   519     0759  2F26               	goto	l49
   520     075A                     l707:
   521                           
   522                           ;SLAVE.c: 45:                     TXREG = 'b';
   523     075A  3062               	movlw	98
   524     075B  0099               	movwf	25	;volatile
   525     075C                     l709:
   526                           
   527                           ;SLAVE.c: 46:                     lcd_command(0x8E);
   528     075C  308E               	movlw	142
   529     075D  120A  118A  2633  120A  118A  	fcall	_lcd_command
   530     0762                     l711:
   531                           
   532                           ;SLAVE.c: 47:                     lcd_data(RCREG);
   533     0762  1283               	bcf	3,5	;RP0=0, select bank0
   534     0763  1303               	bcf	3,6	;RP1=0, select bank0
   535     0764  081A               	movf	26,w	;volatile
   536     0765  120A  118A  261F  120A  118A  	fcall	_lcd_data
   537     076A                     l713:
   538                           
   539                           ;SLAVE.c: 48:                     lcd_command(0xCE);
   540     076A  30CE               	movlw	206
   541     076B  120A  118A  2633  120A  118A  	fcall	_lcd_command
   542     0770                     l715:
   543                           
   544                           ;SLAVE.c: 49:                     lcd_data(TXREG);
   545     0770  1283               	bcf	3,5	;RP0=0, select bank0
   546     0771  1303               	bcf	3,6	;RP1=0, select bank0
   547     0772  0819               	movf	25,w	;volatile
   548     0773  120A  118A  261F  120A  118A  	fcall	_lcd_data
   549                           
   550                           ;SLAVE.c: 50:                     _delay((unsigned long)((200)*(6000000/4000.0)));
   551     0778  3002               	movlw	2
   552     0779  00F7               	movwf	??_main+2
   553     077A  3086               	movlw	134
   554     077B  00F6               	movwf	??_main+1
   555     077C  3099               	movlw	153
   556     077D  00F5               	movwf	??_main
   557     077E                     u57:
   558     077E  0BF5               	decfsz	??_main,f
   559     077F  2F7E               	goto	u57
   560     0780  0BF6               	decfsz	??_main+1,f
   561     0781  2F7E               	goto	u57
   562     0782  0BF7               	decfsz	??_main+2,f
   563     0783  2F7E               	goto	u57
   564                           
   565                           ;SLAVE.c: 51:                     break;
   566     0784  2F26               	goto	l49
   567     0785                     l717:
   568                           
   569                           ;SLAVE.c: 53:                     TXREG = 'c';
   570     0785  3063               	movlw	99
   571     0786  0099               	movwf	25	;volatile
   572     0787                     l719:
   573                           
   574                           ;SLAVE.c: 54:                     lcd_command(0x8E);
   575     0787  308E               	movlw	142
   576     0788  120A  118A  2633  120A  118A  	fcall	_lcd_command
   577     078D                     l721:
   578                           
   579                           ;SLAVE.c: 55:                     lcd_data(RCREG);
   580     078D  1283               	bcf	3,5	;RP0=0, select bank0
   581     078E  1303               	bcf	3,6	;RP1=0, select bank0
   582     078F  081A               	movf	26,w	;volatile
   583     0790  120A  118A  261F  120A  118A  	fcall	_lcd_data
   584     0795                     l723:
   585                           
   586                           ;SLAVE.c: 56:                     lcd_command(0xCE);
   587     0795  30CE               	movlw	206
   588     0796  120A  118A  2633  120A  118A  	fcall	_lcd_command
   589     079B                     l725:
   590                           
   591                           ;SLAVE.c: 57:                     lcd_data(TXREG);
   592     079B  1283               	bcf	3,5	;RP0=0, select bank0
   593     079C  1303               	bcf	3,6	;RP1=0, select bank0
   594     079D  0819               	movf	25,w	;volatile
   595     079E  120A  118A  261F  120A  118A  	fcall	_lcd_data
   596                           
   597                           ;SLAVE.c: 58:                     _delay((unsigned long)((200)*(6000000/4000.0)));
   598     07A3  3002               	movlw	2
   599     07A4  00F7               	movwf	??_main+2
   600     07A5  3086               	movlw	134
   601     07A6  00F6               	movwf	??_main+1
   602     07A7  3099               	movlw	153
   603     07A8  00F5               	movwf	??_main
   604     07A9                     u67:
   605     07A9  0BF5               	decfsz	??_main,f
   606     07AA  2FA9               	goto	u67
   607     07AB  0BF6               	decfsz	??_main+1,f
   608     07AC  2FA9               	goto	u67
   609     07AD  0BF7               	decfsz	??_main+2,f
   610     07AE  2FA9               	goto	u67
   611                           
   612                           ;SLAVE.c: 59:                     break;
   613     07AF  2F26               	goto	l49
   614     07B0                     l727:
   615                           
   616                           ;SLAVE.c: 61:                     TXREG = 'd';
   617     07B0  3064               	movlw	100
   618     07B1  0099               	movwf	25	;volatile
   619     07B2                     l729:
   620                           
   621                           ;SLAVE.c: 62:                     lcd_command(0x8E);
   622     07B2  308E               	movlw	142
   623     07B3  120A  118A  2633  120A  118A  	fcall	_lcd_command
   624     07B8                     l731:
   625                           
   626                           ;SLAVE.c: 63:                     lcd_data(RCREG);
   627     07B8  1283               	bcf	3,5	;RP0=0, select bank0
   628     07B9  1303               	bcf	3,6	;RP1=0, select bank0
   629     07BA  081A               	movf	26,w	;volatile
   630     07BB  120A  118A  261F  120A  118A  	fcall	_lcd_data
   631     07C0                     l733:
   632                           
   633                           ;SLAVE.c: 64:                     lcd_command(0xCE);
   634     07C0  30CE               	movlw	206
   635     07C1  120A  118A  2633  120A  118A  	fcall	_lcd_command
   636     07C6                     l735:
   637                           
   638                           ;SLAVE.c: 65:                     lcd_data(TXREG);
   639     07C6  1283               	bcf	3,5	;RP0=0, select bank0
   640     07C7  1303               	bcf	3,6	;RP1=0, select bank0
   641     07C8  0819               	movf	25,w	;volatile
   642     07C9  120A  118A  261F  120A  118A  	fcall	_lcd_data
   643                           
   644                           ;SLAVE.c: 66:                     _delay((unsigned long)((200)*(6000000/4000.0)));
   645     07CE  3002               	movlw	2
   646     07CF  00F7               	movwf	??_main+2
   647     07D0  3086               	movlw	134
   648     07D1  00F6               	movwf	??_main+1
   649     07D2  3099               	movlw	153
   650     07D3  00F5               	movwf	??_main
   651     07D4                     u77:
   652     07D4  0BF5               	decfsz	??_main,f
   653     07D5  2FD4               	goto	u77
   654     07D6  0BF6               	decfsz	??_main+1,f
   655     07D7  2FD4               	goto	u77
   656     07D8  0BF7               	decfsz	??_main+2,f
   657     07D9  2FD4               	goto	u77
   658                           
   659                           ;SLAVE.c: 67:                     break;
   660     07DA  2F26               	goto	l49
   661     07DB                     l739:
   662     07DB  0879               	movf	_receive_value,w
   663                           
   664                           ; Switch size 1, requested type "simple"
   665                           ; Number of cases is 4, Range of values is 65 to 68
   666                           ; switch strategies available:
   667                           ; Name         Instructions Cycles
   668                           ; simple_byte           13     7 (average)
   669                           ; direct_byte           23    11 (fixed)
   670                           ; jumptable            263     9 (fixed)
   671                           ;	Chosen strategy is simple_byte
   672     07DC  3A41               	xorlw	65	; case 65
   673     07DD  1903               	skipnz
   674     07DE  2F2F               	goto	l697
   675     07DF  3A03               	xorlw	3	; case 66
   676     07E0  1903               	skipnz
   677     07E1  2F5A               	goto	l707
   678     07E2  3A01               	xorlw	1	; case 67
   679     07E3  1903               	skipnz
   680     07E4  2F85               	goto	l717
   681     07E5  3A07               	xorlw	7	; case 68
   682     07E6  1903               	skipnz
   683     07E7  2FB0               	goto	l727
   684     07E8  2F26               	goto	l49
   685     07E9  120A  118A  2800   	ljmp	start
   686     07EC                     __end_of_main:
   687                           
   688                           	psect	text1
   689     064A                     __ptext1:	
   690 ;; *************** function _receive_init *****************
   691 ;; Defined at:
   692 ;;		line 73 in file "SLAVE.c"
   693 ;; Parameters:    Size  Location     Type
   694 ;;		None
   695 ;; Auto vars:     Size  Location     Type
   696 ;;		None
   697 ;; Return value:  Size  Location     Type
   698 ;;                  1    wreg      void 
   699 ;; Registers used:
   700 ;;		wreg, status,2
   701 ;; Tracked objects:
   702 ;;		On entry : 0/0
   703 ;;		On exit  : 0/0
   704 ;;		Unchanged: 0/0
   705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   706 ;;      Params:         0       0       0       0       0
   707 ;;      Locals:         0       0       0       0       0
   708 ;;      Temps:          0       0       0       0       0
   709 ;;      Totals:         0       0       0       0       0
   710 ;;Total ram usage:        0 bytes
   711 ;; Hardware stack levels used: 1
   712 ;; This function calls:
   713 ;;		Nothing
   714 ;; This function is called by:
   715 ;;		_main
   716 ;; This function uses a non-reentrant model
   717 ;;
   718                           
   719     064A                     _receive_init:	
   720                           ;psect for function _receive_init
   721                           
   722     064A                     l623:	
   723                           ;incstack = 0
   724                           ; Regs used in _receive_init: [wreg+status,2]
   725                           
   726                           
   727                           ;SLAVE.c: 74:     TRISC = 0xC0;
   728     064A  30C0               	movlw	192
   729     064B  1683               	bsf	3,5	;RP0=1, select bank1
   730     064C  1303               	bcf	3,6	;RP1=0, select bank1
   731     064D  0087               	movwf	7	;volatile
   732     064E                     l625:
   733                           
   734                           ;SLAVE.c: 75:     TRISB = 0x00;
   735     064E  0186               	clrf	6	;volatile
   736     064F                     l627:
   737                           
   738                           ;SLAVE.c: 76:     PORTB = 0x00;
   739     064F  1283               	bcf	3,5	;RP0=0, select bank0
   740     0650  1303               	bcf	3,6	;RP1=0, select bank0
   741     0651  0186               	clrf	6	;volatile
   742     0652                     l629:
   743                           
   744                           ;SLAVE.c: 77:     TRISD = 0x00;
   745     0652  1683               	bsf	3,5	;RP0=1, select bank1
   746     0653  1303               	bcf	3,6	;RP1=0, select bank1
   747     0654  0188               	clrf	8	;volatile
   748     0655                     l631:
   749                           
   750                           ;SLAVE.c: 78:     PORTD = 0x00;
   751     0655  1283               	bcf	3,5	;RP0=0, select bank0
   752     0656  1303               	bcf	3,6	;RP1=0, select bank0
   753     0657  0188               	clrf	8	;volatile
   754                           
   755                           ;SLAVE.c: 79:     TXSTA = 0x20;
   756     0658  3020               	movlw	32
   757     0659  1683               	bsf	3,5	;RP0=1, select bank1
   758     065A  1303               	bcf	3,6	;RP1=0, select bank1
   759     065B  0098               	movwf	24	;volatile
   760                           
   761                           ;SLAVE.c: 80:     RCSTA = 0x90;
   762     065C  3090               	movlw	144
   763     065D  1283               	bcf	3,5	;RP0=0, select bank0
   764     065E  1303               	bcf	3,6	;RP1=0, select bank0
   765     065F  0098               	movwf	24	;volatile
   766                           
   767                           ;SLAVE.c: 81:     SPBRG = 0x09;
   768     0660  3009               	movlw	9
   769     0661  1683               	bsf	3,5	;RP0=1, select bank1
   770     0662  1303               	bcf	3,6	;RP1=0, select bank1
   771     0663  0099               	movwf	25	;volatile
   772     0664                     l62:
   773     0664  0008               	return
   774     0665                     __end_of_receive_init:
   775                           
   776                           	psect	text2
   777     0683                     __ptext2:	
   778 ;; *************** function _lcd_init *****************
   779 ;; Defined at:
   780 ;;		line 84 in file "SLAVE.c"
   781 ;; Parameters:    Size  Location     Type
   782 ;;		None
   783 ;; Auto vars:     Size  Location     Type
   784 ;;		None
   785 ;; Return value:  Size  Location     Type
   786 ;;                  1    wreg      void 
   787 ;; Registers used:
   788 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   789 ;; Tracked objects:
   790 ;;		On entry : 0/0
   791 ;;		On exit  : 0/0
   792 ;;		Unchanged: 0/0
   793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   794 ;;      Params:         0       0       0       0       0
   795 ;;      Locals:         0       0       0       0       0
   796 ;;      Temps:          2       0       0       0       0
   797 ;;      Totals:         2       0       0       0       0
   798 ;;Total ram usage:        2 bytes
   799 ;; Hardware stack levels used: 1
   800 ;; Hardware stack levels required when called: 1
   801 ;; This function calls:
   802 ;;		_lcd_command
   803 ;; This function is called by:
   804 ;;		_main
   805 ;; This function uses a non-reentrant model
   806 ;;
   807                           
   808     0683                     _lcd_init:	
   809                           ;psect for function _lcd_init
   810                           
   811     0683                     l633:	
   812                           ;incstack = 0
   813                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   814                           
   815                           
   816                           ;SLAVE.c: 85:     lcd_command(0x33);
   817     0683  3033               	movlw	51
   818     0684  120A  118A  2633  120A  118A  	fcall	_lcd_command
   819     0689                     l635:
   820                           
   821                           ;SLAVE.c: 86:     _delay((unsigned long)((100)*(6000000/4000.0)));
   822     0689  30C3               	movlw	195
   823     068A  00F4               	movwf	??_lcd_init+1
   824     068B  30CD               	movlw	205
   825     068C  00F3               	movwf	??_lcd_init
   826     068D                     u87:
   827     068D  0BF3               	decfsz	??_lcd_init,f
   828     068E  2E8D               	goto	u87
   829     068F  0BF4               	decfsz	??_lcd_init+1,f
   830     0690  2E8D               	goto	u87
   831     0691                     l637:
   832                           
   833                           ;SLAVE.c: 87:     lcd_command(0x34);
   834     0691  3034               	movlw	52
   835     0692  120A  118A  2633  120A  118A  	fcall	_lcd_command
   836                           
   837                           ;SLAVE.c: 88:     _delay((unsigned long)((100)*(6000000/4000.0)));
   838     0697  30C3               	movlw	195
   839     0698  00F4               	movwf	??_lcd_init+1
   840     0699  30CD               	movlw	205
   841     069A  00F3               	movwf	??_lcd_init
   842     069B                     u97:
   843     069B  0BF3               	decfsz	??_lcd_init,f
   844     069C  2E9B               	goto	u97
   845     069D  0BF4               	decfsz	??_lcd_init+1,f
   846     069E  2E9B               	goto	u97
   847     069F                     l639:
   848                           
   849                           ;SLAVE.c: 89:     lcd_command(0x32);
   850     069F  3032               	movlw	50
   851     06A0  120A  118A  2633  120A  118A  	fcall	_lcd_command
   852     06A5                     l641:
   853                           
   854                           ;SLAVE.c: 90:     _delay((unsigned long)((100)*(6000000/4000.0)));
   855     06A5  30C3               	movlw	195
   856     06A6  00F4               	movwf	??_lcd_init+1
   857     06A7  30CD               	movlw	205
   858     06A8  00F3               	movwf	??_lcd_init
   859     06A9                     u107:
   860     06A9  0BF3               	decfsz	??_lcd_init,f
   861     06AA  2EA9               	goto	u107
   862     06AB  0BF4               	decfsz	??_lcd_init+1,f
   863     06AC  2EA9               	goto	u107
   864                           
   865                           ;SLAVE.c: 91:     lcd_command(0x38);
   866     06AD  3038               	movlw	56
   867     06AE  120A  118A  2633  120A  118A  	fcall	_lcd_command
   868     06B3                     l643:
   869                           
   870                           ;SLAVE.c: 92:     _delay((unsigned long)((100)*(6000000/4000.0)));
   871     06B3  30C3               	movlw	195
   872     06B4  00F4               	movwf	??_lcd_init+1
   873     06B5  30CD               	movlw	205
   874     06B6  00F3               	movwf	??_lcd_init
   875     06B7                     u117:
   876     06B7  0BF3               	decfsz	??_lcd_init,f
   877     06B8  2EB7               	goto	u117
   878     06B9  0BF4               	decfsz	??_lcd_init+1,f
   879     06BA  2EB7               	goto	u117
   880     06BB                     l645:
   881                           
   882                           ;SLAVE.c: 93:     lcd_command(0x06);
   883     06BB  3006               	movlw	6
   884     06BC  120A  118A  2633  120A  118A  	fcall	_lcd_command
   885                           
   886                           ;SLAVE.c: 94:     _delay((unsigned long)((100)*(6000000/4000.0)));
   887     06C1  30C3               	movlw	195
   888     06C2  00F4               	movwf	??_lcd_init+1
   889     06C3  30CD               	movlw	205
   890     06C4  00F3               	movwf	??_lcd_init
   891     06C5                     u127:
   892     06C5  0BF3               	decfsz	??_lcd_init,f
   893     06C6  2EC5               	goto	u127
   894     06C7  0BF4               	decfsz	??_lcd_init+1,f
   895     06C8  2EC5               	goto	u127
   896     06C9                     l647:
   897                           
   898                           ;SLAVE.c: 95:     lcd_command(0x0C);
   899     06C9  300C               	movlw	12
   900     06CA  120A  118A  2633  120A  118A  	fcall	_lcd_command
   901     06CF                     l649:
   902                           
   903                           ;SLAVE.c: 96:     _delay((unsigned long)((100)*(6000000/4000.0)));
   904     06CF  30C3               	movlw	195
   905     06D0  00F4               	movwf	??_lcd_init+1
   906     06D1  30CD               	movlw	205
   907     06D2  00F3               	movwf	??_lcd_init
   908     06D3                     u137:
   909     06D3  0BF3               	decfsz	??_lcd_init,f
   910     06D4  2ED3               	goto	u137
   911     06D5  0BF4               	decfsz	??_lcd_init+1,f
   912     06D6  2ED3               	goto	u137
   913                           
   914                           ;SLAVE.c: 97:     lcd_command(0x01);
   915     06D7  3001               	movlw	1
   916     06D8  120A  118A  2633  120A  118A  	fcall	_lcd_command
   917     06DD                     l651:
   918                           
   919                           ;SLAVE.c: 98:     _delay((unsigned long)((100)*(6000000/4000.0)));
   920     06DD  30C3               	movlw	195
   921     06DE  00F4               	movwf	??_lcd_init+1
   922     06DF  30CD               	movlw	205
   923     06E0  00F3               	movwf	??_lcd_init
   924     06E1                     u147:
   925     06E1  0BF3               	decfsz	??_lcd_init,f
   926     06E2  2EE1               	goto	u147
   927     06E3  0BF4               	decfsz	??_lcd_init+1,f
   928     06E4  2EE1               	goto	u147
   929     06E5                     l65:
   930     06E5  0008               	return
   931     06E6                     __end_of_lcd_init:
   932                           
   933                           	psect	text3
   934     0633                     __ptext3:	
   935 ;; *************** function _lcd_command *****************
   936 ;; Defined at:
   937 ;;		line 101 in file "SLAVE.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;  i               1    wreg     unsigned char 
   940 ;; Auto vars:     Size  Location     Type
   941 ;;  i               1    2[COMMON] unsigned char 
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		wreg, status,2, status,0, btemp+1
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   951 ;;      Params:         0       0       0       0       0
   952 ;;      Locals:         1       0       0       0       0
   953 ;;      Temps:          2       0       0       0       0
   954 ;;      Totals:         3       0       0       0       0
   955 ;;Total ram usage:        3 bytes
   956 ;; Hardware stack levels used: 1
   957 ;; This function calls:
   958 ;;		Nothing
   959 ;; This function is called by:
   960 ;;		_main
   961 ;;		_lcd_init
   962 ;; This function uses a non-reentrant model
   963 ;;
   964                           
   965     0633                     _lcd_command:	
   966                           ;psect for function _lcd_command
   967                           
   968                           
   969                           ;incstack = 0
   970                           ; Regs used in _lcd_command: [wreg+status,2+status,0+btemp+1]
   971                           ;lcd_command@i stored from wreg
   972     0633  00F2               	movwf	lcd_command@i
   973     0634                     l615:
   974                           
   975                           ;SLAVE.c: 102:     PORTD &= ~0x02;
   976     0634  30FD               	movlw	253
   977     0635  00FF               	movwf	btemp+1
   978     0636  087F               	movf	btemp+1,w
   979     0637  1283               	bcf	3,5	;RP0=0, select bank0
   980     0638  1303               	bcf	3,6	;RP1=0, select bank0
   981     0639  0588               	andwf	8,f	;volatile
   982     063A                     l617:
   983                           
   984                           ;SLAVE.c: 103:     PORTB = i;
   985     063A  0872               	movf	lcd_command@i,w
   986     063B  0086               	movwf	6	;volatile
   987     063C                     l619:
   988                           
   989                           ;SLAVE.c: 104:     PORTD |= 0x01;
   990     063C  1408               	bsf	8,0	;volatile
   991     063D                     l621:
   992                           
   993                           ;SLAVE.c: 105:     PORTD &= ~0x01;
   994     063D  30FE               	movlw	254
   995     063E  00FF               	movwf	btemp+1
   996     063F  087F               	movf	btemp+1,w
   997     0640  0588               	andwf	8,f	;volatile
   998                           
   999                           ;SLAVE.c: 106:     _delay((unsigned long)((100)*(6000000/4000.0)));
  1000     0641  30C3               	movlw	195
  1001     0642  00F1               	movwf	??_lcd_command+1
  1002     0643  30CD               	movlw	205
  1003     0644  00F0               	movwf	??_lcd_command
  1004     0645                     u157:
  1005     0645  0BF0               	decfsz	??_lcd_command,f
  1006     0646  2E45               	goto	u157
  1007     0647  0BF1               	decfsz	??_lcd_command+1,f
  1008     0648  2E45               	goto	u157
  1009     0649                     l68:
  1010     0649  0008               	return
  1011     064A                     __end_of_lcd_command:
  1012                           
  1013                           	psect	text4
  1014     061F                     __ptext4:	
  1015 ;; *************** function _lcd_data *****************
  1016 ;; Defined at:
  1017 ;;		line 109 in file "SLAVE.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;  i               1    wreg     unsigned char 
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;  i               1    2[COMMON] unsigned char 
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  1    wreg      void 
  1024 ;; Registers used:
  1025 ;;		wreg, status,2, status,0, btemp+1
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1031 ;;      Params:         0       0       0       0       0
  1032 ;;      Locals:         1       0       0       0       0
  1033 ;;      Temps:          2       0       0       0       0
  1034 ;;      Totals:         3       0       0       0       0
  1035 ;;Total ram usage:        3 bytes
  1036 ;; Hardware stack levels used: 1
  1037 ;; This function calls:
  1038 ;;		Nothing
  1039 ;; This function is called by:
  1040 ;;		_main
  1041 ;; This function uses a non-reentrant model
  1042 ;;
  1043                           
  1044     061F                     _lcd_data:	
  1045                           ;psect for function _lcd_data
  1046                           
  1047                           
  1048                           ;incstack = 0
  1049                           ; Regs used in _lcd_data: [wreg+status,2+status,0+btemp+1]
  1050                           ;lcd_data@i stored from wreg
  1051     061F  00F2               	movwf	lcd_data@i
  1052     0620                     l653:
  1053                           
  1054                           ;SLAVE.c: 110:     PORTD |= 0x02;
  1055     0620  1283               	bcf	3,5	;RP0=0, select bank0
  1056     0621  1303               	bcf	3,6	;RP1=0, select bank0
  1057     0622  1488               	bsf	8,1	;volatile
  1058     0623                     l655:
  1059                           
  1060                           ;SLAVE.c: 111:     PORTB = i;
  1061     0623  0872               	movf	lcd_data@i,w
  1062     0624  0086               	movwf	6	;volatile
  1063     0625                     l657:
  1064                           
  1065                           ;SLAVE.c: 112:     PORTD |= 0x01;
  1066     0625  1408               	bsf	8,0	;volatile
  1067     0626                     l659:
  1068                           
  1069                           ;SLAVE.c: 113:     PORTD &= ~0x01;
  1070     0626  30FE               	movlw	254
  1071     0627  00FF               	movwf	btemp+1
  1072     0628  087F               	movf	btemp+1,w
  1073     0629  0588               	andwf	8,f	;volatile
  1074     062A                     l661:
  1075                           
  1076                           ;SLAVE.c: 114:     _delay((unsigned long)((100)*(6000000/4000.0)));
  1077     062A  30C3               	movlw	195
  1078     062B  00F1               	movwf	??_lcd_data+1
  1079     062C  30CD               	movlw	205
  1080     062D  00F0               	movwf	??_lcd_data
  1081     062E                     u167:
  1082     062E  0BF0               	decfsz	??_lcd_data,f
  1083     062F  2E2E               	goto	u167
  1084     0630  0BF1               	decfsz	??_lcd_data+1,f
  1085     0631  2E2E               	goto	u167
  1086     0632                     l71:
  1087     0632  0008               	return
  1088     0633                     __end_of_lcd_data:
  1089     007E                     btemp	set	126	;btemp
  1090     007E                     wtemp0	set	126
  1091                           
  1092                           	psect	config
  1093                           
  1094                           ;Config register CONFIG @ 0x2007
  1095                           ;	Oscillator Selection bits
  1096                           ;	FOSC = EXTRC, RC oscillator
  1097                           ;	Watchdog Timer Enable bit
  1098                           ;	WDTE = OFF, WDT disabled
  1099                           ;	Power-up Timer Enable bit
  1100                           ;	PWRTE = OFF, PWRT disabled
  1101                           ;	Brown-out Reset Enable bit
  1102                           ;	BOREN = OFF, BOR disabled
  1103                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1104                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1105                           ;	Data EEPROM Memory Code Protection bit
  1106                           ;	CPD = OFF, Data EEPROM code protection off
  1107                           ;	Flash Program Memory Write Enable bits
  1108                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1109                           ;	In-Circuit Debugger Mode bit
  1110                           ;	DEBUG = 0x1, unprogrammed default
  1111                           ;	Flash Program Memory Code Protection bit
  1112                           ;	CP = OFF, Code protection off
  1113     2007                     	org	8199
  1114     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        30
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            80      0      30
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_lcd_init
    _lcd_init->_lcd_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0      45
                                              5 COMMON     3     3      0
                        _lcd_command
                           _lcd_data
                           _lcd_init
                       _receive_init
 ---------------------------------------------------------------------------------
 (1) _receive_init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0      15
                                              3 COMMON     2     2      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_data                                             3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_command
   _lcd_data
   _lcd_init
     _lcd_command
   _receive_init

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0      1E       5       37.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      28      12        0.0%
ABS                  0      0      28       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Thu Oct 03 20:55:15 2024

                      _a 002F                        _b 0020                        _i 0078  
                      pc 0002                       l62 0664                       l71 0632  
                     l65 06E5                       l49 0726                       l68 0649  
                     u10 070B                       u11 070A                       u20 0726  
                     u21 0725                       u30 072C                       u31 072B  
                     u47 0753                       u57 077E                       u67 07A9  
                     u77 07D4                       u87 068D                       u97 069B  
                     fsr 0004                      l621 063D                      l701 0737  
                    l615 0634                      l631 0655                      l623 064A  
                    l711 0762                      l703 073F                      l617 063A  
                    l641 06A5                      l633 0683                      l625 064E  
                    l721 078D                      l713 076A                      l705 0745  
                    l619 063C                      l651 06DD                      l643 06B3  
                    l635 0689                      l627 064F                      l731 07B8  
                    l723 0795                      l715 0770                      l707 075A  
                    l661 062A                      l653 0620                      l645 06BB  
                    l637 0691                      l629 0652                      l733 07C0  
                    l725 079B                      l717 0785                      l709 075C  
                    l655 0623                      l647 06C9                      l639 069F  
                    l735 07C6                      l727 07B0                      l719 0787  
                    l663 06E6                      l657 0625                      l649 06CF  
                    l729 07B2                      l681 070B                      l665 06EB  
                    l659 0626                      l739 07DB                      l691 071C  
                    l683 0711                      l675 06F7                      l667 06F0  
                    l693 0720                      l677 0701                      l669 06F6  
                    l695 072C                      l679 0705                      l697 072F  
                    l689 0712                      l699 0731                      u107 06A9  
                    u117 06B7                      u127 06C5                      u137 06D3  
                    u147 06E1                      u157 0645                      u167 062E  
                    fsr0 0004                      indf 0000             lcd_command@i 0072  
                   _PIR1 000C                     _main 06E6                     btemp 007E  
                   start 0000                    ?_main 0070                    _RCREG 001A  
                  _RCSTA 0018                    _SPBRG 0099                    _PORTB 0006  
                  _PORTD 0008                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088                    _TXREG 0019                    _TXSTA 0098  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 07EC             __end_of_main 07EC                   ??_main 0075  
       __end_of_lcd_data 0633         __end_of_lcd_init 06E6  __end_of__initialization 07FC  
          ?_receive_init 0070           __pcstackCOMMON 0070             __pidataBANK0 0665  
         ??_receive_init 0070               __pmaintext 06E6                ?_lcd_data 0070  
              ?_lcd_init 0070                  __ptext1 064A                  __ptext2 0683  
                __ptext3 0633                  __ptext4 061F               ??_lcd_data 0070  
             ??_lcd_init 0073            _receive_value 0079     end_of_initialization 07FC  
   __end_of_receive_init 0665            ??_lcd_command 0070      start_initialization 07EC  
             init_fetch0 060C      __end_of_lcd_command 064A              __pdataBANK0 0020  
            __pbssCOMMON 0078                ___latbits 0002             _receive_init 064A  
            _lcd_command 0633                lcd_data@i 0072                 _lcd_data 061F  
               _lcd_init 0683                 init_ram0 0610             ?_lcd_command 0070  
