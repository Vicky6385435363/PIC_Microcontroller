

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue Dec 03 20:32:50 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    11                           	dabs	1,0x7E,2
    12     0000                     
    13                           ; Generated 12/10/2023 GMT
    14                           ; 
    15                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution. Publication is not required when
    29                           ;        this file is used in an embedded application.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC16F877A Definitions
    45                           ; 
    46                           ; SFR Addresses
    47     0000                     	;# 
    48     0001                     	;# 
    49     0002                     	;# 
    50     0003                     	;# 
    51     0004                     	;# 
    52     0005                     	;# 
    53     0006                     	;# 
    54     0007                     	;# 
    55     0008                     	;# 
    56     0009                     	;# 
    57     000A                     	;# 
    58     000B                     	;# 
    59     000C                     	;# 
    60     000D                     	;# 
    61     000E                     	;# 
    62     000E                     	;# 
    63     000F                     	;# 
    64     0010                     	;# 
    65     0011                     	;# 
    66     0012                     	;# 
    67     0013                     	;# 
    68     0014                     	;# 
    69     0015                     	;# 
    70     0015                     	;# 
    71     0016                     	;# 
    72     0017                     	;# 
    73     0018                     	;# 
    74     0019                     	;# 
    75     001A                     	;# 
    76     001B                     	;# 
    77     001B                     	;# 
    78     001C                     	;# 
    79     001D                     	;# 
    80     001E                     	;# 
    81     001F                     	;# 
    82     0081                     	;# 
    83     0085                     	;# 
    84     0086                     	;# 
    85     0087                     	;# 
    86     0088                     	;# 
    87     0089                     	;# 
    88     008C                     	;# 
    89     008D                     	;# 
    90     008E                     	;# 
    91     0091                     	;# 
    92     0092                     	;# 
    93     0093                     	;# 
    94     0094                     	;# 
    95     0098                     	;# 
    96     0099                     	;# 
    97     009C                     	;# 
    98     009D                     	;# 
    99     009E                     	;# 
   100     009F                     	;# 
   101     010C                     	;# 
   102     010D                     	;# 
   103     010E                     	;# 
   104     010F                     	;# 
   105     018C                     	;# 
   106     018D                     	;# 
   107     0000                     	;# 
   108     0001                     	;# 
   109     0002                     	;# 
   110     0003                     	;# 
   111     0004                     	;# 
   112     0005                     	;# 
   113     0006                     	;# 
   114     0007                     	;# 
   115     0008                     	;# 
   116     0009                     	;# 
   117     000A                     	;# 
   118     000B                     	;# 
   119     000C                     	;# 
   120     000D                     	;# 
   121     000E                     	;# 
   122     000E                     	;# 
   123     000F                     	;# 
   124     0010                     	;# 
   125     0011                     	;# 
   126     0012                     	;# 
   127     0013                     	;# 
   128     0014                     	;# 
   129     0015                     	;# 
   130     0015                     	;# 
   131     0016                     	;# 
   132     0017                     	;# 
   133     0018                     	;# 
   134     0019                     	;# 
   135     001A                     	;# 
   136     001B                     	;# 
   137     001B                     	;# 
   138     001C                     	;# 
   139     001D                     	;# 
   140     001E                     	;# 
   141     001F                     	;# 
   142     0081                     	;# 
   143     0085                     	;# 
   144     0086                     	;# 
   145     0087                     	;# 
   146     0088                     	;# 
   147     0089                     	;# 
   148     008C                     	;# 
   149     008D                     	;# 
   150     008E                     	;# 
   151     0091                     	;# 
   152     0092                     	;# 
   153     0093                     	;# 
   154     0094                     	;# 
   155     0098                     	;# 
   156     0099                     	;# 
   157     009C                     	;# 
   158     009D                     	;# 
   159     009E                     	;# 
   160     009F                     	;# 
   161     010C                     	;# 
   162     010D                     	;# 
   163     010E                     	;# 
   164     010F                     	;# 
   165     018C                     	;# 
   166     018D                     	;# 
   167     0013                     _SSPBUF	set	19
   168     0014                     _SSPCON	set	20
   169     0008                     _PORTD	set	8
   170     0006                     _PORTB	set	6
   171     0034                     _RB4	set	52
   172     0033                     _RB3	set	51
   173     0032                     _RB2	set	50
   174     0031                     _RB1	set	49
   175     0030                     _RB0	set	48
   176     0087                     _TRISC	set	135
   177     0094                     _SSPSTAT	set	148
   178     0088                     _TRISD	set	136
   179     0086                     _TRISB	set	134
   180                           
   181                           	psect	cinit
   182     07FB                     start_initialization:	
   183                           ; #config settings
   184                           
   185     07FB                     __initialization:
   186                           
   187                           ; Clear objects allocated to COMMON
   188     07FB  01F4               	clrf	__pbssCOMMON& (0+127)
   189     07FC                     end_of_initialization:	
   190                           ;End of C runtime variable initialization code
   191                           
   192     07FC                     __end_of__initialization:
   193     07FC  0183               	clrf	3
   194     07FD  120A  118A  2F5A   	ljmp	_main	;jump to C main() function
   195                           
   196                           	psect	bssCOMMON
   197     0074                     __pbssCOMMON:
   198     0074                     _Data:
   199     0074                     	ds	1
   200                           
   201                           	psect	cstackCOMMON
   202     0070                     __pcstackCOMMON:
   203     0070                     ?_SPI_Master_Init:
   204     0070                     ??_SPI_Master_Init:	
   205                           ; 1 bytes @ 0x0
   206                           
   207     0070                     ?_SPI_Write:	
   208                           ; 1 bytes @ 0x0
   209                           
   210     0070                     ??_SPI_Write:	
   211                           ; 1 bytes @ 0x0
   212                           
   213     0070                     ?_main:	
   214                           ; 1 bytes @ 0x0
   215                           
   216     0070                     SPI_Write@Data:	
   217                           ; 1 bytes @ 0x0
   218                           
   219                           
   220                           ; 1 bytes @ 0x0
   221     0070                     	ds	1
   222     0071                     ??_main:
   223                           
   224                           ; 1 bytes @ 0x1
   225     0071                     	ds	3
   226                           
   227                           	psect	maintext
   228     075A                     __pmaintext:	
   229 ;;
   230 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   231 ;;
   232 ;; *************** function _main *****************
   233 ;; Defined at:
   234 ;;		line 35 in file "MASTER.c"
   235 ;; Parameters:    Size  Location     Type
   236 ;;		None
   237 ;; Auto vars:     Size  Location     Type
   238 ;;		None
   239 ;; Return value:  Size  Location     Type
   240 ;;                  1    wreg      void 
   241 ;; Registers used:
   242 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   243 ;; Tracked objects:
   244 ;;		On entry : B00/0
   245 ;;		On exit  : 0/0
   246 ;;		Unchanged: 0/0
   247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   248 ;;      Params:         0       0       0       0       0
   249 ;;      Locals:         0       0       0       0       0
   250 ;;      Temps:          3       0       0       0       0
   251 ;;      Totals:         3       0       0       0       0
   252 ;;Total ram usage:        3 bytes
   253 ;; Hardware stack levels required when called: 1
   254 ;; This function calls:
   255 ;;		_SPI_Master_Init
   256 ;;		_SPI_Write
   257 ;; This function is called by:
   258 ;;		Startup code after reset
   259 ;; This function uses a non-reentrant model
   260 ;;
   261                           
   262     075A                     _main:	
   263                           ;psect for function _main
   264                           
   265     075A                     l605:	
   266                           ;incstack = 0
   267                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   268                           
   269                           
   270                           ;MASTER.c: 37:     SPI_Master_Init();
   271     075A  120A  118A  2750  120A  118A  	fcall	_SPI_Master_Init
   272     075F                     l607:
   273                           
   274                           ;MASTER.c: 38:     TRISB = 0x1F;
   275     075F  301F               	movlw	31
   276     0760  1683               	bsf	3,5	;RP0=1, select bank1
   277     0761  1303               	bcf	3,6	;RP1=0, select bank1
   278     0762  0086               	movwf	6	;volatile
   279     0763                     l609:
   280                           
   281                           ;MASTER.c: 39:     TRISD = 0x00;
   282     0763  0188               	clrf	8	;volatile
   283     0764                     l611:
   284                           
   285                           ;MASTER.c: 40:     PORTB = 0xE0;
   286     0764  30E0               	movlw	224
   287     0765  1283               	bcf	3,5	;RP0=0, select bank0
   288     0766  1303               	bcf	3,6	;RP1=0, select bank0
   289     0767  0086               	movwf	6	;volatile
   290     0768                     l613:
   291                           
   292                           ;MASTER.c: 41:     PORTD = 0x00;
   293     0768  0188               	clrf	8	;volatile
   294     0769                     l615:
   295                           
   296                           ;MASTER.c: 45:         if (RB0)
   297     0769  1C06               	btfss	6,0	;volatile
   298     076A  2F6C               	goto	u11
   299     076B  2F6D               	goto	u10
   300     076C                     u11:
   301     076C  2F7E               	goto	l621
   302     076D                     u10:
   303     076D                     l617:
   304                           
   305                           ;MASTER.c: 46:         {;MASTER.c: 47:             Data++;
   306     076D  3001               	movlw	1
   307     076E  00FF               	movwf	btemp+1
   308     076F  087F               	movf	btemp+1,w
   309     0770  07F4               	addwf	_Data,f
   310     0771                     l619:
   311                           
   312                           ;MASTER.c: 48:             _delay((unsigned long)((250)*(4000000/4000.0)));
   313     0771  3002               	movlw	2
   314     0772  00F3               	movwf	??_main+2
   315     0773  3045               	movlw	69
   316     0774  00F2               	movwf	??_main+1
   317     0775  30A9               	movlw	169
   318     0776  00F1               	movwf	??_main
   319     0777                     u67:
   320     0777  0BF1               	decfsz	??_main,f
   321     0778  2F77               	goto	u67
   322     0779  0BF2               	decfsz	??_main+1,f
   323     077A  2F77               	goto	u67
   324     077B  0BF3               	decfsz	??_main+2,f
   325     077C  2F77               	goto	u67
   326     077D  2F7E               	nop2
   327     077E                     l621:
   328                           
   329                           ;MASTER.c: 51:         if (RB1)
   330     077E  1283               	bcf	3,5	;RP0=0, select bank0
   331     077F  1303               	bcf	3,6	;RP1=0, select bank0
   332     0780  1C86               	btfss	6,1	;volatile
   333     0781  2F83               	goto	u21
   334     0782  2F84               	goto	u20
   335     0783                     u21:
   336     0783  2F93               	goto	l627
   337     0784                     u20:
   338     0784                     l623:
   339                           
   340                           ;MASTER.c: 52:         {;MASTER.c: 53:             Data--;
   341     0784  3001               	movlw	1
   342     0785  02F4               	subwf	_Data,f
   343     0786                     l625:
   344                           
   345                           ;MASTER.c: 54:             _delay((unsigned long)((250)*(4000000/4000.0)));
   346     0786  3002               	movlw	2
   347     0787  00F3               	movwf	??_main+2
   348     0788  3045               	movlw	69
   349     0789  00F2               	movwf	??_main+1
   350     078A  30A9               	movlw	169
   351     078B  00F1               	movwf	??_main
   352     078C                     u77:
   353     078C  0BF1               	decfsz	??_main,f
   354     078D  2F8C               	goto	u77
   355     078E  0BF2               	decfsz	??_main+1,f
   356     078F  2F8C               	goto	u77
   357     0790  0BF3               	decfsz	??_main+2,f
   358     0791  2F8C               	goto	u77
   359     0792  2F93               	nop2
   360     0793                     l627:
   361                           
   362                           ;MASTER.c: 57:         if (RB2)
   363     0793  1283               	bcf	3,5	;RP0=0, select bank0
   364     0794  1303               	bcf	3,6	;RP1=0, select bank0
   365     0795  1D06               	btfss	6,2	;volatile
   366     0796  2F98               	goto	u31
   367     0797  2F99               	goto	u30
   368     0798                     u31:
   369     0798  2FB5               	goto	l637
   370     0799                     u30:
   371     0799                     l629:
   372                           
   373                           ;MASTER.c: 58:         {;MASTER.c: 59:             SPI_Write(Data);
   374     0799  0874               	movf	_Data,w
   375     079A  120A  118A  274A  120A  118A  	fcall	_SPI_Write
   376     079F                     l631:
   377                           
   378                           ;MASTER.c: 60:             PORTB &= 0x60;
   379     079F  3060               	movlw	96
   380     07A0  00FF               	movwf	btemp+1
   381     07A1  087F               	movf	btemp+1,w
   382     07A2  1283               	bcf	3,5	;RP0=0, select bank0
   383     07A3  1303               	bcf	3,6	;RP1=0, select bank0
   384     07A4  0586               	andwf	6,f	;volatile
   385     07A5                     l633:
   386                           
   387                           ;MASTER.c: 61:             _delay((unsigned long)((250)*(4000000/4000.0)));
   388     07A5  3002               	movlw	2
   389     07A6  00F3               	movwf	??_main+2
   390     07A7  3045               	movlw	69
   391     07A8  00F2               	movwf	??_main+1
   392     07A9  30A9               	movlw	169
   393     07AA  00F1               	movwf	??_main
   394     07AB                     u87:
   395     07AB  0BF1               	decfsz	??_main,f
   396     07AC  2FAB               	goto	u87
   397     07AD  0BF2               	decfsz	??_main+1,f
   398     07AE  2FAB               	goto	u87
   399     07AF  0BF3               	decfsz	??_main+2,f
   400     07B0  2FAB               	goto	u87
   401     07B1  2FB2               	nop2
   402     07B2                     l635:
   403                           
   404                           ;MASTER.c: 62:             PORTB |= 0x80;
   405     07B2  1283               	bcf	3,5	;RP0=0, select bank0
   406     07B3  1303               	bcf	3,6	;RP1=0, select bank0
   407     07B4  1786               	bsf	6,7	;volatile
   408     07B5                     l637:
   409                           
   410                           ;MASTER.c: 64:         if (RB3)
   411     07B5  1D86               	btfss	6,3	;volatile
   412     07B6  2FB8               	goto	u41
   413     07B7  2FB9               	goto	u40
   414     07B8                     u41:
   415     07B8  2FD5               	goto	l647
   416     07B9                     u40:
   417     07B9                     l639:
   418                           
   419                           ;MASTER.c: 65:         {;MASTER.c: 66:             SPI_Write(Data);
   420     07B9  0874               	movf	_Data,w
   421     07BA  120A  118A  274A  120A  118A  	fcall	_SPI_Write
   422     07BF                     l641:
   423                           
   424                           ;MASTER.c: 67:             PORTB &= 0xA0;
   425     07BF  30A0               	movlw	160
   426     07C0  00FF               	movwf	btemp+1
   427     07C1  087F               	movf	btemp+1,w
   428     07C2  1283               	bcf	3,5	;RP0=0, select bank0
   429     07C3  1303               	bcf	3,6	;RP1=0, select bank0
   430     07C4  0586               	andwf	6,f	;volatile
   431     07C5                     l643:
   432                           
   433                           ;MASTER.c: 68:             _delay((unsigned long)((250)*(4000000/4000.0)));
   434     07C5  3002               	movlw	2
   435     07C6  00F3               	movwf	??_main+2
   436     07C7  3045               	movlw	69
   437     07C8  00F2               	movwf	??_main+1
   438     07C9  30A9               	movlw	169
   439     07CA  00F1               	movwf	??_main
   440     07CB                     u97:
   441     07CB  0BF1               	decfsz	??_main,f
   442     07CC  2FCB               	goto	u97
   443     07CD  0BF2               	decfsz	??_main+1,f
   444     07CE  2FCB               	goto	u97
   445     07CF  0BF3               	decfsz	??_main+2,f
   446     07D0  2FCB               	goto	u97
   447     07D1  2FD2               	nop2
   448     07D2                     l645:
   449                           
   450                           ;MASTER.c: 69:             PORTB |= 0x40;
   451     07D2  1283               	bcf	3,5	;RP0=0, select bank0
   452     07D3  1303               	bcf	3,6	;RP1=0, select bank0
   453     07D4  1706               	bsf	6,6	;volatile
   454     07D5                     l647:
   455                           
   456                           ;MASTER.c: 71:         if (RB4)
   457     07D5  1E06               	btfss	6,4	;volatile
   458     07D6  2FD8               	goto	u51
   459     07D7  2FD9               	goto	u50
   460     07D8                     u51:
   461     07D8  2FF5               	goto	l657
   462     07D9                     u50:
   463     07D9                     l649:
   464                           
   465                           ;MASTER.c: 72:         {;MASTER.c: 73:             SPI_Write(Data);
   466     07D9  0874               	movf	_Data,w
   467     07DA  120A  118A  274A  120A  118A  	fcall	_SPI_Write
   468     07DF                     l651:
   469                           
   470                           ;MASTER.c: 74:             PORTB &= 0xC0;
   471     07DF  30C0               	movlw	192
   472     07E0  00FF               	movwf	btemp+1
   473     07E1  087F               	movf	btemp+1,w
   474     07E2  1283               	bcf	3,5	;RP0=0, select bank0
   475     07E3  1303               	bcf	3,6	;RP1=0, select bank0
   476     07E4  0586               	andwf	6,f	;volatile
   477     07E5                     l653:
   478                           
   479                           ;MASTER.c: 75:             _delay((unsigned long)((250)*(4000000/4000.0)));
   480     07E5  3002               	movlw	2
   481     07E6  00F3               	movwf	??_main+2
   482     07E7  3045               	movlw	69
   483     07E8  00F2               	movwf	??_main+1
   484     07E9  30A9               	movlw	169
   485     07EA  00F1               	movwf	??_main
   486     07EB                     u107:
   487     07EB  0BF1               	decfsz	??_main,f
   488     07EC  2FEB               	goto	u107
   489     07ED  0BF2               	decfsz	??_main+1,f
   490     07EE  2FEB               	goto	u107
   491     07EF  0BF3               	decfsz	??_main+2,f
   492     07F0  2FEB               	goto	u107
   493     07F1  2FF2               	nop2
   494     07F2                     l655:
   495                           
   496                           ;MASTER.c: 76:             PORTB |= 0x20;
   497     07F2  1283               	bcf	3,5	;RP0=0, select bank0
   498     07F3  1303               	bcf	3,6	;RP1=0, select bank0
   499     07F4  1686               	bsf	6,5	;volatile
   500     07F5                     l657:
   501                           
   502                           ;MASTER.c: 86:         PORTD = Data;
   503     07F5  0874               	movf	_Data,w
   504     07F6  0088               	movwf	8	;volatile
   505     07F7  2F69               	goto	l615
   506     07F8  120A  118A  2800   	ljmp	start
   507     07FB                     __end_of_main:
   508                           
   509                           	psect	text1
   510     074A                     __ptext1:	
   511 ;; *************** function _SPI_Write *****************
   512 ;; Defined at:
   513 ;;		line 102 in file "MASTER.c"
   514 ;; Parameters:    Size  Location     Type
   515 ;;  Data            1    wreg     unsigned char 
   516 ;; Auto vars:     Size  Location     Type
   517 ;;  Data            1    0[COMMON] unsigned char 
   518 ;; Return value:  Size  Location     Type
   519 ;;                  1    wreg      void 
   520 ;; Registers used:
   521 ;;		wreg
   522 ;; Tracked objects:
   523 ;;		On entry : 0/0
   524 ;;		On exit  : 0/0
   525 ;;		Unchanged: 0/0
   526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   527 ;;      Params:         0       0       0       0       0
   528 ;;      Locals:         1       0       0       0       0
   529 ;;      Temps:          0       0       0       0       0
   530 ;;      Totals:         1       0       0       0       0
   531 ;;Total ram usage:        1 bytes
   532 ;; Hardware stack levels used: 1
   533 ;; This function calls:
   534 ;;		Nothing
   535 ;; This function is called by:
   536 ;;		_main
   537 ;; This function uses a non-reentrant model
   538 ;;
   539                           
   540     074A                     _SPI_Write:	
   541                           ;psect for function _SPI_Write
   542                           
   543                           
   544                           ;incstack = 0
   545                           ; Regs used in _SPI_Write: [wreg]
   546                           ;SPI_Write@Data stored from wreg
   547     074A  00F0               	movwf	SPI_Write@Data
   548     074B                     l603:
   549                           
   550                           ;MASTER.c: 103:     SSPBUF = Data;
   551     074B  0870               	movf	SPI_Write@Data,w
   552     074C  1283               	bcf	3,5	;RP0=0, select bank0
   553     074D  1303               	bcf	3,6	;RP1=0, select bank0
   554     074E  0093               	movwf	19	;volatile
   555     074F                     l53:
   556     074F  0008               	return
   557     0750                     __end_of_SPI_Write:
   558                           
   559                           	psect	text2
   560     0750                     __ptext2:	
   561 ;; *************** function _SPI_Master_Init *****************
   562 ;; Defined at:
   563 ;;		line 94 in file "MASTER.c"
   564 ;; Parameters:    Size  Location     Type
   565 ;;		None
   566 ;; Auto vars:     Size  Location     Type
   567 ;;		None
   568 ;; Return value:  Size  Location     Type
   569 ;;                  1    wreg      void 
   570 ;; Registers used:
   571 ;;		wreg, status,2
   572 ;; Tracked objects:
   573 ;;		On entry : 0/0
   574 ;;		On exit  : 0/0
   575 ;;		Unchanged: 0/0
   576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   577 ;;      Params:         0       0       0       0       0
   578 ;;      Locals:         0       0       0       0       0
   579 ;;      Temps:          0       0       0       0       0
   580 ;;      Totals:         0       0       0       0       0
   581 ;;Total ram usage:        0 bytes
   582 ;; Hardware stack levels used: 1
   583 ;; This function calls:
   584 ;;		Nothing
   585 ;; This function is called by:
   586 ;;		_main
   587 ;; This function uses a non-reentrant model
   588 ;;
   589                           
   590     0750                     _SPI_Master_Init:	
   591                           ;psect for function _SPI_Master_Init
   592                           
   593     0750                     l597:	
   594                           ;incstack = 0
   595                           ; Regs used in _SPI_Master_Init: [wreg+status,2]
   596                           
   597                           
   598                           ;MASTER.c: 95:     SSPCON = 0x20;
   599     0750  3020               	movlw	32
   600     0751  1283               	bcf	3,5	;RP0=0, select bank0
   601     0752  1303               	bcf	3,6	;RP1=0, select bank0
   602     0753  0094               	movwf	20	;volatile
   603     0754                     l599:
   604                           
   605                           ;MASTER.c: 96:     SSPSTAT = 0x00;
   606     0754  1683               	bsf	3,5	;RP0=1, select bank1
   607     0755  1303               	bcf	3,6	;RP1=0, select bank1
   608     0756  0194               	clrf	20	;volatile
   609     0757                     l601:
   610                           
   611                           ;MASTER.c: 97:     TRISC = 0x10;
   612     0757  3010               	movlw	16
   613     0758  0087               	movwf	7	;volatile
   614     0759                     l50:
   615     0759  0008               	return
   616     075A                     __end_of_SPI_Master_Init:
   617     007E                     btemp	set	126	;btemp
   618     007E                     wtemp0	set	126
   619                           
   620                           	psect	config
   621                           
   622                           ;Config register CONFIG @ 0x2007
   623                           ;	Oscillator Selection bits
   624                           ;	FOSC = EXTRC, RC oscillator
   625                           ;	Watchdog Timer Enable bit
   626                           ;	WDTE = OFF, WDT disabled
   627                           ;	Power-up Timer Enable bit
   628                           ;	PWRTE = OFF, PWRT disabled
   629                           ;	Brown-out Reset Enable bit
   630                           ;	BOREN = OFF, BOR disabled
   631                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   632                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   633                           ;	Data EEPROM Memory Code Protection bit
   634                           ;	CPD = OFF, Data EEPROM code protection off
   635                           ;	Flash Program Memory Write Enable bits
   636                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   637                           ;	In-Circuit Debugger Mode bit
   638                           ;	DEBUG = 0x1, unprogrammed default
   639                           ;	Flash Program Memory Code Protection bit
   640                           ;	CP = OFF, Code protection off
   641     2007                     	org	8199
   642     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4       5
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_SPI_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0      15
                                              1 COMMON     3     3      0
                    _SPI_Master_Init
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (1) _SPI_Write                                            1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPI_Master_Init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_Master_Init
   _SPI_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      4       5       1       35.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       5       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       5      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue Dec 03 20:32:50 2024

        _SPI_Master_Init 0750                       l50 0759                       l53 074F  
                     u10 076D                       u11 076C                       u20 0784  
                     u21 0783                       u30 0799                       u31 0798  
                     u40 07B9                       u41 07B8                       u50 07D9  
                     u51 07D8                       u67 0777                       u77 078C  
                     u87 07AB                       u97 07CB                      l601 0757  
                    l603 074B                      l611 0764                      l621 077E  
                    l613 0768                      l605 075A                      l631 079F  
                    l623 0784                      l615 0769                      l607 075F  
                    l641 07BF                      l633 07A5                      l625 0786  
                    l617 076D                      l609 0763                      l651 07DF  
                    l643 07C5                      l635 07B2                      l627 0793  
                    l619 0771                      l653 07E5                      l645 07D2  
                    l629 0799                      l637 07B5                      l655 07F2  
                    l639 07B9                      l647 07D5                      l649 07D9  
                    l657 07F5                      l597 0750                      l599 0754  
                    _RB0 0030                      _RB1 0031                      _RB2 0032  
                    _RB3 0033                      _RB4 0034                      u107 07EB  
                   _Data 0074                     _main 075A                     btemp 007E  
                   start 0000                    ?_main 0070                    _PORTB 0006  
                  _PORTD 0008                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088                    status 0003                    wtemp0 007E  
__end_of_SPI_Master_Init 075A          __initialization 07FB             __end_of_main 07FB  
                 ??_main 0071                   _SSPCON 0014                   _SSPBUF 0013  
      __end_of_SPI_Write 0750  __end_of__initialization 07FC         ?_SPI_Master_Init 0070  
         __pcstackCOMMON 0070               __pmaintext 075A                  _SSPSTAT 0094  
          SPI_Write@Data 0070                  __ptext1 074A                  __ptext2 0750  
   end_of_initialization 07FC                _SPI_Write 074A      start_initialization 07FB  
             ?_SPI_Write 0070              __pbssCOMMON 0074                ___latbits 0002  
            ??_SPI_Write 0070        ??_SPI_Master_Init 0070  
